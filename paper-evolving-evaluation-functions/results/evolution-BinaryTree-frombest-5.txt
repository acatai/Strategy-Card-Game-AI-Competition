Parameters:
  ELITISM 5
  EVALUATOR_DRAFTS 10
  EVALUATOR_ROUNDS 10
  EVOLUTION_DRAFTS 10
  EVOLUTION_ROUNDS 10
  GENERATIONS 50
  INDIVIDUAL BinaryTree
  MUTATION_RATE 0.05
  POPULATION 50
  SCORING frombest

generation   1: 115.32s // best: BinaryTreeIndividual { card_node: FeatureAttack, state_node: FeatureOpNextTurnDraw }
generation   2: 131.01s // best: BinaryTreeIndividual { card_node: OperatorSub(FeatureHasGuard, OperatorSub(OperatorMin(FeatureHasLethal, OperatorAdd(Literal(-0.96907663), FeatureHasCharge)), FeatureAttack)), state_node: FeatureMeRune }
generation   3: 124.54s // best: BinaryTreeIndividual { card_node: OperatorSub(FeatureHasGuard, OperatorSub(OperatorMin(FeatureHasLethal, OperatorAdd(Literal(-0.96907663), FeatureHasCharge)), FeatureAttack)), state_node: FeatureMeRune }
generation   4: 117.74s // best: BinaryTreeIndividual { card_node: OperatorSub(FeatureHasGuard, OperatorSub(OperatorMin(FeatureHasLethal, OperatorAdd(Literal(-0.96907663), FeatureHasCharge)), FeatureAttack)), state_node: FeatureMeRune }
generation   5: 119.20s // best: BinaryTreeIndividual { card_node: OperatorSub(FeatureHasGuard, OperatorSub(OperatorMin(FeatureHasLethal, OperatorAdd(Literal(-0.96907663), FeatureHasCharge)), FeatureAttack)), state_node: FeatureMeRune }
generation   6: 114.88s // best: BinaryTreeIndividual { card_node: OperatorSub(FeatureHasGuard, OperatorSub(OperatorMin(FeatureHasWard, OperatorAdd(Literal(-0.96907663), FeatureHasBreakthrough)), FeatureAttack)), state_node: OperatorMul(FeatureMeMaxMana, FeatureOpNextTurnDraw) }
generation   7: 107.21s // best: BinaryTreeIndividual { card_node: OperatorSub(FeatureHasGuard, OperatorSub(OperatorMin(FeatureHasWard, OperatorAdd(Literal(-0.96907663), FeatureHasBreakthrough)), FeatureAttack)), state_node: OperatorMul(FeatureMeMaxMana, FeatureOpNextTurnDraw) }
generation   8: 126.95s // best: BinaryTreeIndividual { card_node: OperatorSub(FeatureHasGuard, OperatorSub(Literal(-0.96907663), FeatureAttack)), state_node: OperatorMul(FeatureOpNextTurnDraw, FeatureMeMaxMana) }
generation   9: 117.02s // best: BinaryTreeIndividual { card_node: OperatorSub(FeatureHasGuard, OperatorSub(Literal(-0.96907663), FeatureAttack)), state_node: OperatorMul(FeatureOpNextTurnDraw, FeatureMeMaxMana) }
generation  10: 103.25s // best: BinaryTreeIndividual { card_node: OperatorSub(FeatureHasGuard, OperatorSub(Literal(-0.96907663), FeatureAttack)), state_node: OperatorMul(FeatureOpNextTurnDraw, FeatureMeMaxMana) }
generation  11: 111.21s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), OperatorSub(Literal(-0.96907663), FeatureAttack)), state_node: FeatureOpNextTurnDraw }
generation  12: 113.29s // best: BinaryTreeIndividual { card_node: OperatorSub(FeatureHasGuard, OperatorSub(Literal(-0.96907663), FeatureAttack)), state_node: OperatorMul(FeatureOpNextTurnDraw, FeatureMeMaxMana) }
generation  13: 117.56s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), OperatorSub(Literal(-0.96907663), FeatureAttack)), state_node: FeatureOpNextTurnDraw }
generation  14: 121.67s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMax(FeatureAttack, OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(FeatureAttack, FeatureHasGuard)))), state_node: Literal(-0.073174715) }
generation  15: 109.87s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMax(FeatureAttack, OperatorSub(Literal(-0.96907663), OperatorSub(FeatureHasGuard, FeatureAttack))), OperatorSub(FeatureAttack, FeatureHasGuard)))), state_node: FeatureOpNextTurnDraw }
generation  16: 124.14s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMax(FeatureAttack, OperatorSub(Literal(-0.96907663), OperatorSub(FeatureHasGuard, FeatureAttack))), OperatorSub(FeatureAttack, FeatureHasGuard)))), state_node: FeatureOpNextTurnDraw }
generation  17: 131.64s // best: BinaryTreeIndividual { card_node: OperatorMax(FeatureAttack, OperatorSub(OperatorMul(OperatorSub(FeatureHasGuard, OperatorSub(Literal(-0.96907663), FeatureHasDrain)), FeatureAttack), OperatorSub(Literal(-0.96907663), FeatureAttack))), state_node: FeatureOpNextTurnDraw }
generation  18: 116.62s // best: BinaryTreeIndividual { card_node: OperatorMax(FeatureAttack, OperatorSub(OperatorMul(OperatorSub(FeatureHasGuard, OperatorSub(Literal(-0.96907663), FeatureHasDrain)), FeatureAttack), OperatorSub(Literal(-0.96907663), FeatureAttack))), state_node: FeatureOpNextTurnDraw }
generation  19: 127.08s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMax(FeatureAttack, OperatorSub(Literal(-0.96907663), OperatorSub(FeatureHasGuard, FeatureAttack))), OperatorSub(FeatureAttack, FeatureHasGuard)))), state_node: FeatureOpNextTurnDraw }
generation  20: 123.39s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(FeatureHasGuard, FeatureAttack), OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), OperatorSub(OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), OperatorSub(Literal(-0.96907663), FeatureAttack)))))), state_node: FeatureOpNextTurnDraw }
generation  21: 137.11s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), OperatorSub(OperatorMul(FeatureHasGuard, OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), FeatureAttack)), FeatureAttack)), state_node: FeatureOpNextTurnDraw }
generation  22: 114.37s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), OperatorSub(FeatureHasCharge, OperatorSub(OperatorMul(Literal(-0.96907663), OperatorMax(OperatorSub(FeatureHasGuard, OperatorSub(Literal(-0.96907663), FeatureAttack)), FeatureHasBreakthrough)), OperatorSub(OperatorMul(FeatureHasCharge, FeatureAttack), FeatureAttack)))), OperatorSub(Literal(-0.96907663), FeatureAttack)), state_node: FeatureOpNextTurnDraw }
generation  23: 124.05s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), OperatorSub(Literal(-0.96907663), FeatureAttack)), Literal(-0.96907663)), state_node: FeatureOpNextTurnDraw }
generation  24: 125.61s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), OperatorSub(OperatorMul(FeatureHasGuard, OperatorSub(OperatorSub(Literal(-0.96907663), OperatorMul(FeatureHasGuard, FeatureAttack)), FeatureAttack)), FeatureAttack)), state_node: FeatureOpNextTurnDraw }
generation  25: 127.67s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), OperatorSub(FeatureHasCharge, OperatorSub(OperatorMul(Literal(-0.96907663), OperatorMax(OperatorSub(FeatureHasGuard, OperatorSub(Literal(-0.96907663), FeatureAttack)), FeatureHasBreakthrough)), OperatorSub(OperatorMul(FeatureAttack, FeatureHasGuard), FeatureHasGuard)))), OperatorSub(Literal(-0.96907663), FeatureAttack)), state_node: FeatureOpNextTurnDraw }
generation  26: 120.64s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMax(FeatureAttack, OperatorSub(Literal(-0.96907663), OperatorSub(FeatureHasGuard, FeatureHasGuard))), OperatorSub(FeatureAttack, FeatureHasGuard)))), state_node: FeatureOpNextTurnDraw }
generation  27: 123.12s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorMul(OperatorSub(OperatorSub(FeatureHasGuard, FeatureAttack), OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), OperatorSub(FeatureAttack, OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), OperatorSub(Literal(-0.96907663), FeatureAttack)))))), FeatureHasGuard), OperatorSub(OperatorMul(FeatureHasBreakthrough, OperatorSub(OperatorSub(FeatureHasGuard, FeatureAttack), FeatureAttack)), FeatureAttack)), state_node: FeatureOpNextTurnDraw }
generation  28: 133.87s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMax(FeatureAttack, FeatureHasDrain), OperatorSub(FeatureAttack, FeatureHasGuard)))), state_node: FeatureOpNextTurnDraw }
generation  29: 126.66s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), OperatorSub(OperatorSub(OperatorSub(OperatorMul(FeatureAttack, FeatureHasGuard), OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMul(OperatorSub(FeatureAttack, FeatureHasGuard), FeatureHasLethal), OperatorSub(Literal(-0.96907663), FeatureHasGuard)))))), state_node: FeatureOpNextTurnDraw }
generation  30: 143.93s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), OperatorSub(OperatorSub(OperatorSub(OperatorMul(FeatureAttack, FeatureHasGuard), OperatorSub(Literal(-0.96907663), OperatorMul(FeatureAttack, FeatureHasGuard))), OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMul(OperatorMin(OperatorAdd(FeatureHasBreakthrough, FeatureAttack), FeatureHasLethal), FeatureHasLethal), OperatorSub(Literal(-0.96907663), FeatureHasGuard)))))), state_node: FeatureOpNextTurnDraw }
generation  31: 132.79s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), OperatorSub(OperatorSub(OperatorSub(OperatorMul(FeatureAttack, FeatureHasGuard), OperatorSub(FeatureHasBreakthrough, FeatureAttack)), OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMul(OperatorSub(FeatureAttack, FeatureHasGuard), FeatureHasLethal), OperatorSub(FeatureAttack, FeatureHasGuard)))))), state_node: FeatureOpNextTurnDraw }
generation  32: 137.86s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), OperatorSub(OperatorSub(FeatureHasGuard, OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMul(OperatorMin(OperatorAdd(FeatureHasBreakthrough, FeatureAttack), FeatureHasLethal), FeatureHasLethal), OperatorSub(Literal(-0.96907663), FeatureHasGuard)))))), state_node: FeatureOpNextTurnDraw }
generation  33: 142.24s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), OperatorSub(OperatorSub(OperatorSub(OperatorMul(FeatureAttack, FeatureHasGuard), OperatorSub(FeatureHasBreakthrough, FeatureAttack)), OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMul(OperatorSub(FeatureAttack, FeatureHasGuard), FeatureHasLethal), OperatorSub(FeatureAttack, FeatureHasGuard)))))), state_node: FeatureOpNextTurnDraw }
generation  34: 138.62s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), OperatorSub(OperatorSub(OperatorSub(OperatorMul(FeatureAttack, FeatureHasGuard), OperatorSub(FeatureHasBreakthrough, FeatureAttack)), OperatorSub(OperatorSub(FeatureAttack, FeatureAttack), FeatureAttack)), OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMul(OperatorSub(FeatureAttack, FeatureHasGuard), FeatureHasLethal), OperatorSub(FeatureAttack, FeatureHasGuard)))))), state_node: FeatureOpNextTurnDraw }
generation  35: 142.70s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), OperatorSub(OperatorSub(FeatureHasGuard, OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(FeatureHasLethal, OperatorSub(OperatorMul(OperatorMin(OperatorAdd(FeatureHasBreakthrough, FeatureAttack), FeatureHasLethal), FeatureHasLethal), OperatorSub(Literal(-0.96907663), FeatureHasGuard)))))), state_node: FeatureOpNextTurnDraw }
generation  36: 149.82s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMax(FeatureAttack, OperatorSub(FeatureAttack, FeatureHasBreakthrough)), OperatorSub(FeatureAttack, OperatorSub(OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMax(FeatureAttack, OperatorSub(Literal(-0.96907663), OperatorSub(OperatorSub(FeatureAttack, FeatureHasGuard), FeatureHasGuard))), FeatureHasLethal)), OperatorSub(FeatureAttack, OperatorSub(FeatureAttack, OperatorSub(Literal(-0.96907663), FeatureAttack)))))))), state_node: FeatureOpNextTurnDraw }
generation  37: 133.90s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorMul(OperatorSub(OperatorSub(FeatureHasGuard, OperatorSub(FeatureAttack, FeatureHasGuard)), OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), OperatorSub(OperatorSub(OperatorMul(FeatureHasGuard, Literal(-0.96907663)), OperatorSub(OperatorMax(FeatureAttack, FeatureAttack), FeatureAttack)), OperatorSub(FeatureHasGuard, FeatureAttack)))), FeatureHasGuard), OperatorSub(OperatorMul(FeatureHasBreakthrough, OperatorSub(OperatorSub(OperatorMax(FeatureAttack, OperatorSub(OperatorSub(OperatorSub(Literal(-0.96907663), OperatorMul(FeatureHasGuard, Literal(-0.96907663))), FeatureAttack), Literal(-0.96907663))), OperatorSub(FeatureAttack, FeatureHasGuard)), FeatureAttack)), FeatureAttack)), state_node: FeatureOpNextTurnDraw }
generation  38: 130.78s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorMul(OperatorSub(OperatorSub(FeatureHasGuard, OperatorSub(Literal(-0.96907663), FeatureHasGuard)), OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), OperatorSub(OperatorSub(OperatorMul(FeatureHasGuard, Literal(-0.96907663)), OperatorSub(OperatorMax(FeatureAttack, OperatorSub(Literal(-0.96907663), OperatorSub(FeatureHasGuard, OperatorSub(Literal(-0.96907663), FeatureAttack)))), Literal(-0.96907663))), OperatorSub(Literal(-0.96907663), FeatureAttack)))), FeatureHasGuard), OperatorSub(OperatorMul(FeatureHasBreakthrough, OperatorSub(OperatorSub(OperatorMax(FeatureAttack, OperatorSub(OperatorSub(FeatureAttack, FeatureAttack), Literal(-0.96907663))), OperatorSub(FeatureAttack, FeatureHasGuard)), FeatureAttack)), FeatureAttack)), state_node: FeatureOpNextTurnDraw }
generation  39: 137.09s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorMul(OperatorSub(OperatorSub(FeatureHasGuard, OperatorSub(Literal(-0.96907663), FeatureHasGuard)), OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), OperatorSub(OperatorSub(OperatorMul(FeatureHasGuard, Literal(-0.96907663)), OperatorSub(OperatorMax(FeatureAttack, OperatorSub(Literal(-0.96907663), OperatorSub(FeatureHasGuard, OperatorSub(Literal(-0.96907663), FeatureHasGuard)))), Literal(-0.96907663))), OperatorSub(Literal(-0.96907663), FeatureAttack)))), FeatureHasGuard), OperatorSub(OperatorMul(FeatureHasBreakthrough, OperatorSub(OperatorSub(OperatorMax(FeatureAttack, OperatorSub(OperatorSub(FeatureAttack, FeatureAttack), Literal(-0.96907663))), OperatorSub(FeatureAttack, FeatureHasGuard)), FeatureAttack)), FeatureAttack)), state_node: FeatureOpNextTurnDraw }
generation  40: 145.59s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(Literal(-0.96907663), OperatorSub(FeatureHasGuard, OperatorSub(Literal(-0.96907663), Literal(-0.96907663))))), state_node: OperatorMax(OperatorMul(OperatorSub(FeatureOpNextTurnDraw, FeatureOpDecksize), FeatureOpDecksize), OperatorAdd(OperatorMax(FeatureMeHealth, FeatureOpNextTurnDraw), OperatorMin(FeatureMeRune, OperatorMin(FeatureMeNextTurnDraw, OperatorMul(OperatorMax(FeatureOpCurrentMana, FeatureMeHealth), OperatorSub(OperatorSub(OperatorMin(FeatureMeNextTurnDraw, OperatorSub(OperatorMax(FeatureMeCurrentMana, FeatureOpHealth), OperatorMul(FeatureOpHealth, FeatureMeCurrentMana))), FeatureOpNextTurnDraw), OperatorMax(FeatureOpRune, OperatorMul(FeatureOpMaxMana, FeatureMeDecksize)))))))) }
generation  41: 135.94s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMul(OperatorMin(OperatorAdd(Literal(-0.96907663), FeatureAttack), FeatureHasLethal), FeatureHasGuard), OperatorSub(Literal(-0.96907663), FeatureHasGuard))), OperatorSub(OperatorMax(FeatureAttack, OperatorSub(FeatureAttack, OperatorSub(FeatureAttack, OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), OperatorSub(OperatorMul(OperatorMin(OperatorAdd(FeatureHasBreakthrough, FeatureAttack), FeatureHasLethal), FeatureHasGuard), OperatorSub(Literal(-0.96907663), FeatureHasGuard)))))), OperatorSub(FeatureAttack, FeatureHasGuard)))), state_node: FeatureOpNextTurnDraw }
generation  42: 149.95s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMul(OperatorMin(OperatorAdd(Literal(-0.96907663), FeatureAttack), FeatureHasLethal), FeatureHasGuard), OperatorSub(Literal(-0.96907663), FeatureHasGuard))), OperatorSub(OperatorMax(FeatureAttack, OperatorSub(FeatureAttack, OperatorSub(FeatureAttack, OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), OperatorSub(OperatorMul(OperatorMin(OperatorAdd(FeatureHasBreakthrough, FeatureAttack), FeatureHasLethal), FeatureHasGuard), OperatorSub(Literal(-0.96907663), FeatureHasGuard)))))), OperatorSub(FeatureAttack, FeatureHasGuard)))), state_node: FeatureOpNextTurnDraw }
generation  43: 146.51s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMax(FeatureAttack, OperatorSub(FeatureAttack, OperatorSub(FeatureAttack, OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), FeatureAttack)))), FeatureAttack))), state_node: FeatureOpNextTurnDraw }
generation  44: 160.89s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(FeatureHasGuard, OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMul(OperatorMin(OperatorAdd(Literal(-0.96907663), FeatureAttack), FeatureHasLethal), FeatureHasGuard), OperatorSub(Literal(-0.96907663), FeatureHasGuard))), OperatorSub(OperatorMax(FeatureAttack, OperatorSub(FeatureAttack, OperatorSub(FeatureAttack, OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), OperatorSub(OperatorMul(OperatorMin(OperatorAdd(FeatureHasBreakthrough, FeatureAttack), FeatureHasLethal), FeatureHasGuard), OperatorSub(OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(OperatorSub(Literal(-0.96907663), OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(Literal(-0.96907663), OperatorSub(OperatorSub(FeatureHasGuard, FeatureHasWard), FeatureAttack))))))))), OperatorSub(FeatureAttack, FeatureHasGuard)))), state_node: FeatureOpNextTurnDraw }
generation  45: 159.07s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(FeatureHasGuard, OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMul(OperatorMin(OperatorAdd(Literal(-0.96907663), FeatureAttack), FeatureHasLethal), FeatureHasGuard), OperatorSub(Literal(-0.96907663), FeatureHasGuard))), OperatorSub(OperatorMax(FeatureAttack, OperatorSub(FeatureAttack, OperatorSub(FeatureAttack, OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), OperatorSub(OperatorMul(OperatorMin(OperatorAdd(FeatureHasBreakthrough, FeatureAttack), FeatureHasLethal), FeatureHasGuard), OperatorSub(OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(OperatorSub(Literal(-0.96907663), OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(Literal(-0.96907663), OperatorSub(OperatorSub(FeatureHasGuard, FeatureHasWard), FeatureAttack))))))))), OperatorSub(FeatureAttack, FeatureHasGuard)))), state_node: FeatureOpNextTurnDraw }
generation  46: 162.76s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(FeatureHasGuard, OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMul(OperatorMin(OperatorAdd(Literal(-0.96907663), FeatureAttack), FeatureHasLethal), FeatureHasGuard), OperatorSub(Literal(-0.96907663), FeatureHasGuard))), OperatorSub(OperatorMax(FeatureAttack, OperatorSub(FeatureAttack, OperatorSub(FeatureAttack, OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), OperatorSub(OperatorMul(OperatorMin(OperatorAdd(FeatureHasBreakthrough, FeatureAttack), FeatureHasLethal), FeatureHasGuard), OperatorSub(OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(OperatorSub(Literal(-0.96907663), OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(Literal(-0.96907663), OperatorSub(OperatorSub(FeatureHasGuard, FeatureHasWard), FeatureAttack))))))))), OperatorSub(FeatureAttack, FeatureHasGuard)))), state_node: FeatureOpNextTurnDraw }
generation  47: 156.32s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(FeatureHasGuard, OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMul(OperatorMin(OperatorAdd(Literal(-0.96907663), FeatureAttack), FeatureHasLethal), FeatureHasGuard), OperatorSub(Literal(-0.96907663), FeatureHasGuard))), OperatorSub(OperatorMax(FeatureAttack, OperatorSub(FeatureAttack, OperatorSub(FeatureAttack, OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), OperatorSub(OperatorMul(OperatorMin(OperatorAdd(FeatureHasBreakthrough, FeatureAttack), FeatureHasLethal), FeatureHasGuard), OperatorSub(OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(OperatorSub(Literal(-0.96907663), OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(Literal(-0.96907663), OperatorSub(OperatorSub(Literal(-0.96907663), FeatureHasWard), FeatureAttack))))))))), OperatorSub(FeatureAttack, FeatureHasGuard)))), state_node: FeatureOpNextTurnDraw }
generation  48: 153.88s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(FeatureHasGuard, OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMul(OperatorMin(OperatorAdd(Literal(-0.96907663), FeatureAttack), FeatureHasLethal), FeatureHasGuard), OperatorSub(Literal(-0.96907663), FeatureHasGuard))), OperatorSub(OperatorMul(OperatorMin(OperatorAdd(FeatureHasBreakthrough, FeatureAttack), FeatureHasLethal), FeatureHasGuard), OperatorSub(Literal(-0.96907663), FeatureHasGuard)))), state_node: FeatureOpNextTurnDraw }
generation  49: 154.91s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(FeatureHasGuard, OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMul(OperatorMin(OperatorAdd(Literal(-0.96907663), FeatureAttack), FeatureHasLethal), FeatureHasGuard), OperatorSub(Literal(-0.96907663), FeatureHasGuard))), OperatorSub(OperatorMul(OperatorMin(OperatorAdd(FeatureHasBreakthrough, FeatureAttack), FeatureHasLethal), FeatureHasGuard), OperatorSub(Literal(-0.96907663), FeatureHasGuard)))), state_node: FeatureOpNextTurnDraw }
generation  50: 165.36s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorSub(FeatureHasGuard, OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMul(OperatorMin(OperatorAdd(Literal(-0.96907663), FeatureAttack), FeatureHasLethal), FeatureHasGuard), OperatorSub(Literal(-0.96907663), FeatureHasGuard))), OperatorSub(OperatorMax(FeatureAttack, OperatorSub(FeatureAttack, OperatorSub(FeatureAttack, OperatorSub(OperatorSub(Literal(-0.96907663), FeatureAttack), OperatorSub(OperatorMul(OperatorMin(OperatorAdd(FeatureHasBreakthrough, FeatureAttack), FeatureHasLethal), FeatureHasGuard), OperatorSub(OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(OperatorSub(Literal(-0.96907663), OperatorSub(Literal(-0.96907663), FeatureAttack)), OperatorSub(Literal(-0.96907663), OperatorSub(OperatorSub(OperatorSub(OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), OperatorSub(FeatureHasGuard, FeatureAttack)), OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMax(OperatorSub(OperatorMax(FeatureAttack, OperatorSub(FeatureAttack, FeatureHasBreakthrough)), OperatorSub(Literal(-0.96907663), OperatorSub(Literal(-0.96907663), FeatureAttack))), OperatorSub(FeatureAttack, FeatureHasBreakthrough)), OperatorSub(FeatureAttack, OperatorSub(OperatorSub(Literal(-0.96907663), OperatorSub(OperatorMax(OperatorSub(Literal(-0.96907663), FeatureAttack), FeatureAttack), OperatorSub(Literal(-0.96907663), FeatureAttack))), Literal(-0.96907663)))))), FeatureHasWard), FeatureAttack))))))))), OperatorSub(FeatureAttack, FeatureHasGuard)))), state_node: FeatureOpNextTurnDraw }
------ 59.00% 62.00% 57.00% 52.00% 53.00% 57.00% 48.00% 71.00% 56.00% 53.00% 66.00% 59.00% 64.00% 57.00% 61.00% 54.00% 53.00% 61.00% 64.00% 65.00% 59.00% 55.00% 46.00% 52.00% 64.00% 58.00% 62.00% 58.00% 66.00% 62.00% 57.00% 57.00% 60.00% 54.00% 54.00% 63.00% 57.00% 60.00% 64.00% 52.00% 70.00% 63.00% 55.00% 56.00% 53.00% 61.00% 64.00% 57.00% 65.00% 58.69%
58.00% ------ 62.00% 54.00% 67.00% 60.00% 57.00% 65.00% 65.00% 60.00% 65.00% 58.00% 52.00% 64.00% 65.00% 75.00% 58.00% 67.00% 64.00% 70.00% 71.00% 54.00% 64.00% 68.00% 61.00% 67.00% 64.00% 70.00% 56.00% 66.00% 60.00% 71.00% 69.00% 71.00% 61.00% 62.00% 62.00% 65.00% 59.00% 58.00% 63.00% 65.00% 71.00% 64.00% 65.00% 66.00% 64.00% 63.00% 71.00% 70.00% 63.82%
67.00% 57.00% ------ 59.00% 65.00% 55.00% 60.00% 60.00% 63.00% 65.00% 64.00% 64.00% 59.00% 72.00% 70.00% 71.00% 66.00% 59.00% 78.00% 68.00% 72.00% 59.00% 69.00% 71.00% 54.00% 66.00% 57.00% 77.00% 60.00% 70.00% 67.00% 66.00% 66.00% 63.00% 64.00% 61.00% 62.00% 73.00% 73.00% 65.00% 64.00% 78.00% 69.00% 64.00% 61.00% 63.00% 68.00% 67.00% 67.00% 62.00% 65.31%
54.00% 58.00% 65.00% ------ 58.00% 60.00% 56.00% 58.00% 58.00% 63.00% 65.00% 61.00% 54.00% 74.00% 62.00% 66.00% 61.00% 56.00% 75.00% 71.00% 71.00% 59.00% 62.00% 73.00% 56.00% 66.00% 71.00% 68.00% 68.00% 67.00% 59.00% 54.00% 67.00% 64.00% 61.00% 68.00% 63.00% 64.00% 69.00% 63.00% 69.00% 61.00% 63.00% 70.00% 63.00% 59.00% 62.00% 63.00% 66.00% 58.00% 63.31%
67.00% 67.00% 48.00% 57.00% ------ 48.00% 55.00% 71.00% 51.00% 63.00% 64.00% 60.00% 64.00% 67.00% 67.00% 63.00% 63.00% 66.00% 59.00% 65.00% 69.00% 61.00% 61.00% 81.00% 58.00% 77.00% 69.00% 73.00% 65.00% 69.00% 64.00% 62.00% 68.00% 61.00% 60.00% 52.00% 67.00% 61.00% 61.00% 53.00% 65.00% 69.00% 61.00% 64.00% 65.00% 66.00% 70.00% 70.00% 63.00% 65.00% 63.57%
62.00% 58.00% 66.00% 49.00% 59.00% ------ 59.00% 63.00% 59.00% 69.00% 60.00% 63.00% 60.00% 68.00% 69.00% 68.00% 63.00% 54.00% 52.00% 63.00% 66.00% 59.00% 64.00% 74.00% 60.00% 65.00% 63.00% 78.00% 55.00% 67.00% 66.00% 64.00% 63.00% 63.00% 56.00% 58.00% 64.00% 65.00% 55.00% 61.00% 64.00% 65.00% 65.00% 69.00% 65.00% 54.00% 70.00% 54.00% 63.00% 66.00% 62.55%
63.00% 63.00% 63.00% 64.00% 60.00% 54.00% ------ 57.00% 62.00% 56.00% 62.00% 56.00% 57.00% 70.00% 69.00% 65.00% 53.00% 63.00% 72.00% 60.00% 61.00% 60.00% 67.00% 70.00% 55.00% 68.00% 60.00% 71.00% 59.00% 62.00% 54.00% 63.00% 67.00% 59.00% 64.00% 61.00% 58.00% 62.00% 61.00% 52.00% 62.00% 71.00% 61.00% 61.00% 61.00% 65.00% 56.00% 61.00% 62.00% 65.00% 61.80%
67.00% 71.00% 64.00% 59.00% 62.00% 56.00% 57.00% ------ 52.00% 55.00% 59.00% 64.00% 66.00% 70.00% 66.00% 71.00% 53.00% 61.00% 67.00% 67.00% 69.00% 54.00% 65.00% 65.00% 55.00% 65.00% 57.00% 67.00% 49.00% 67.00% 57.00% 61.00% 60.00% 62.00% 58.00% 61.00% 63.00% 66.00% 66.00% 55.00% 63.00% 63.00% 59.00% 67.00% 58.00% 59.00% 65.00% 60.00% 66.00% 71.00% 62.04%
64.00% 63.00% 61.00% 58.00% 60.00% 54.00% 58.00% 67.00% ------ 55.00% 61.00% 59.00% 63.00% 76.00% 67.00% 68.00% 57.00% 60.00% 66.00% 66.00% 62.00% 51.00% 60.00% 69.00% 56.00% 72.00% 63.00% 67.00% 55.00% 65.00% 58.00% 58.00% 62.00% 64.00% 57.00% 67.00% 65.00% 62.00% 61.00% 62.00% 66.00% 60.00% 57.00% 73.00% 68.00% 60.00% 66.00% 62.00% 65.00% 59.00% 62.35%
64.00% 63.00% 41.00% 65.00% 67.00% 57.00% 52.00% 59.00% 62.00% ------ 62.00% 51.00% 65.00% 65.00% 64.00% 60.00% 62.00% 59.00% 68.00% 60.00% 73.00% 61.00% 57.00% 60.00% 46.00% 63.00% 60.00% 55.00% 62.00% 65.00% 58.00% 59.00% 60.00% 66.00% 67.00% 63.00% 51.00% 62.00% 61.00% 53.00% 68.00% 60.00% 67.00% 58.00% 56.00% 59.00% 59.00% 58.00% 64.00% 67.00% 60.49%
64.00% 53.00% 59.00% 57.00% 53.00% 61.00% 63.00% 63.00% 56.00% 58.00% ------ 55.00% 66.00% 68.00% 74.00% 70.00% 61.00% 63.00% 61.00% 66.00% 71.00% 55.00% 72.00% 74.00% 58.00% 67.00% 68.00% 71.00% 58.00% 75.00% 61.00% 63.00% 69.00% 60.00% 58.00% 59.00% 72.00% 68.00% 71.00% 73.00% 73.00% 66.00% 65.00% 62.00% 71.00% 64.00% 69.00% 66.00% 61.00% 58.00% 64.27%
57.00% 58.00% 60.00% 56.00% 57.00% 52.00% 52.00% 56.00% 62.00% 63.00% 66.00% ------ 59.00% 72.00% 71.00% 62.00% 58.00% 52.00% 53.00% 61.00% 60.00% 70.00% 57.00% 68.00% 59.00% 65.00% 62.00% 65.00% 65.00% 68.00% 73.00% 61.00% 71.00% 56.00% 56.00% 66.00% 63.00% 73.00% 68.00% 64.00% 63.00% 71.00% 65.00% 60.00% 69.00% 68.00% 60.00% 55.00% 62.00% 53.00% 62.10%
64.00% 49.00% 59.00% 50.00% 57.00% 53.00% 60.00% 61.00% 56.00% 56.00% 58.00% 64.00% ------ 75.00% 77.00% 76.00% 60.00% 58.00% 59.00% 66.00% 72.00% 61.00% 71.00% 69.00% 52.00% 71.00% 78.00% 67.00% 56.00% 70.00% 63.00% 67.00% 61.00% 63.00% 62.00% 57.00% 64.00% 68.00% 58.00% 64.00% 63.00% 63.00% 63.00% 63.00% 76.00% 69.00% 63.00% 59.00% 62.00% 61.00% 63.14%
60.00% 60.00% 49.00% 46.00% 55.00% 61.00% 61.00% 61.00% 68.00% 58.00% 64.00% 61.00% 55.00% ------ 67.00% 62.00% 62.00% 52.00% 61.00% 63.00% 58.00% 50.00% 61.00% 77.00% 59.00% 64.00% 69.00% 63.00% 52.00% 70.00% 54.00% 62.00% 66.00% 51.00% 56.00% 54.00% 61.00% 65.00% 66.00% 62.00% 65.00% 59.00% 62.00% 48.00% 56.00% 59.00% 60.00% 56.00% 62.00% 59.00% 59.84%
60.00% 46.00% 50.00% 65.00% 54.00% 66.00% 62.00% 62.00% 60.00% 60.00% 49.00% 69.00% 65.00% 73.00% ------ 62.00% 57.00% 53.00% 58.00% 61.00% 73.00% 50.00% 59.00% 61.00% 58.00% 60.00% 67.00% 69.00% 57.00% 71.00% 60.00% 54.00% 55.00% 60.00% 56.00% 59.00% 70.00% 73.00% 73.00% 59.00% 63.00% 66.00% 66.00% 54.00% 66.00% 58.00% 67.00% 67.00% 69.00% 54.00% 61.35%
58.00% 59.00% 48.00% 66.00% 60.00% 60.00% 63.00% 60.00% 55.00% 61.00% 57.00% 67.00% 65.00% 62.00% 50.00% ------ 55.00% 62.00% 64.00% 60.00% 63.00% 54.00% 60.00% 68.00% 59.00% 70.00% 72.00% 69.00% 52.00% 64.00% 58.00% 57.00% 63.00% 53.00% 61.00% 45.00% 59.00% 54.00% 71.00% 66.00% 70.00% 70.00% 53.00% 55.00% 58.00% 58.00% 51.00% 69.00% 61.00% 59.00% 60.29%
66.00% 62.00% 63.00% 56.00% 60.00% 62.00% 65.00% 66.00% 61.00% 61.00% 62.00% 57.00% 68.00% 76.00% 70.00% 67.00% ------ 62.00% 69.00% 66.00% 72.00% 55.00% 66.00% 79.00% 65.00% 72.00% 73.00% 73.00% 61.00% 73.00% 62.00% 70.00% 58.00% 65.00% 55.00% 70.00% 70.00% 66.00% 69.00% 72.00% 68.00% 75.00% 60.00% 69.00% 78.00% 70.00% 75.00% 77.00% 69.00% 68.00% 66.82%
68.00% 64.00% 60.00% 51.00% 64.00% 64.00% 64.00% 61.00% 62.00% 58.00% 73.00% 66.00% 67.00% 76.00% 66.00% 77.00% 60.00% ------ 65.00% 67.00% 74.00% 64.00% 72.00% 75.00% 64.00% 67.00% 66.00% 68.00% 60.00% 71.00% 67.00% 69.00% 57.00% 65.00% 62.00% 66.00% 66.00% 72.00% 67.00% 70.00% 74.00% 63.00% 63.00% 79.00% 63.00% 65.00% 73.00% 66.00% 64.00% 68.00% 66.39%
65.00% 54.00% 66.00% 60.00% 59.00% 70.00% 61.00% 56.00% 63.00% 68.00% 55.00% 63.00% 62.00% 67.00% 70.00% 69.00% 54.00% 58.00% ------ 62.00% 64.00% 55.00% 69.00% 77.00% 53.00% 70.00% 69.00% 62.00% 61.00% 58.00% 55.00% 61.00% 58.00% 64.00% 63.00% 58.00% 70.00% 67.00% 66.00% 57.00% 68.00% 73.00% 55.00% 63.00% 56.00% 63.00% 59.00% 65.00% 62.00% 54.00% 62.39%
66.00% 54.00% 58.00% 61.00% 57.00% 61.00% 74.00% 62.00% 57.00% 59.00% 57.00% 68.00% 64.00% 72.00% 70.00% 65.00% 65.00% 58.00% 61.00% ------ 74.00% 58.00% 63.00% 69.00% 56.00% 60.00% 67.00% 71.00% 64.00% 70.00% 67.00% 57.00% 55.00% 78.00% 50.00% 53.00% 56.00% 67.00% 63.00% 71.00% 65.00% 71.00% 68.00% 56.00% 64.00% 75.00% 66.00% 64.00% 63.00% 64.00% 63.55%
58.00% 47.00% 54.00% 51.00% 49.00% 62.00% 66.00% 54.00% 53.00% 46.00% 53.00% 63.00% 50.00% 54.00% 55.00% 63.00% 41.00% 50.00% 51.00% 47.00% ------ 48.00% 53.00% 62.00% 58.00% 42.00% 73.00% 56.00% 41.00% 62.00% 52.00% 47.00% 51.00% 48.00% 51.00% 52.00% 53.00% 57.00% 60.00% 50.00% 53.00% 55.00% 56.00% 49.00% 54.00% 57.00% 52.00% 50.00% 58.00% 52.00% 53.45%
64.00% 55.00% 66.00% 55.00% 59.00% 64.00% 68.00% 71.00% 69.00% 66.00% 66.00% 62.00% 69.00% 72.00% 68.00% 72.00% 66.00% 65.00% 76.00% 63.00% 78.00% ------ 69.00% 68.00% 67.00% 63.00% 59.00% 78.00% 62.00% 70.00% 63.00% 60.00% 67.00% 64.00% 60.00% 66.00% 67.00% 62.00% 71.00% 71.00% 72.00% 81.00% 79.00% 63.00% 72.00% 70.00% 64.00% 67.00% 62.00% 67.00% 66.90%
62.00% 50.00% 56.00% 63.00% 53.00% 60.00% 67.00% 61.00% 67.00% 63.00% 72.00% 57.00% 61.00% 70.00% 73.00% 70.00% 58.00% 58.00% 77.00% 67.00% 83.00% 48.00% ------ 75.00% 65.00% 71.00% 66.00% 69.00% 58.00% 66.00% 68.00% 58.00% 70.00% 66.00% 59.00% 67.00% 72.00% 67.00% 64.00% 73.00% 70.00% 69.00% 67.00% 62.00% 67.00% 64.00% 69.00% 68.00% 61.00% 63.00% 65.10%
62.00% 54.00% 58.00% 63.00% 57.00% 61.00% 56.00% 58.00% 44.00% 54.00% 49.00% 66.00% 51.00% 50.00% 51.00% 57.00% 49.00% 47.00% 53.00% 54.00% 55.00% 48.00% 62.00% ------ 52.00% 56.00% 48.00% 62.00% 52.00% 62.00% 54.00% 48.00% 48.00% 52.00% 54.00% 44.00% 54.00% 56.00% 55.00% 64.00% 55.00% 53.00% 58.00% 55.00% 49.00% 47.00% 47.00% 50.00% 58.00% 58.00% 54.08%
69.00% 68.00% 62.00% 69.00% 61.00% 69.00% 61.00% 63.00% 68.00% 60.00% 53.00% 62.00% 68.00% 62.00% 54.00% 61.00% 60.00% 57.00% 65.00% 62.00% 70.00% 59.00% 71.00% 61.00% ------ 64.00% 63.00% 70.00% 65.00% 66.00% 70.00% 56.00% 65.00% 67.00% 64.00% 58.00% 64.00% 62.00% 70.00% 52.00% 72.00% 66.00% 63.00% 73.00% 61.00% 59.00% 61.00% 61.00% 58.00% 53.00% 63.22%
66.00% 54.00% 61.00% 57.00% 48.00% 65.00% 65.00% 63.00% 69.00% 61.00% 65.00% 63.00% 61.00% 69.00% 74.00% 64.00% 52.00% 59.00% 62.00% 63.00% 68.00% 54.00% 59.00% 77.00% 57.00% ------ 65.00% 67.00% 56.00% 69.00% 58.00% 58.00% 61.00% 54.00% 54.00% 56.00% 57.00% 57.00% 62.00% 62.00% 61.00% 67.00% 55.00% 66.00% 61.00% 60.00% 64.00% 62.00% 59.00% 51.00% 61.18%
63.00% 60.00% 63.00% 57.00% 54.00% 58.00% 58.00% 56.00% 62.00% 60.00% 55.00% 56.00% 46.00% 59.00% 60.00% 54.00% 62.00% 68.00% 58.00% 61.00% 65.00% 43.00% 54.00% 71.00% 63.00% 48.00% ------ 61.00% 47.00% 63.00% 47.00% 54.00% 64.00% 54.00% 61.00% 54.00% 52.00% 58.00% 58.00% 56.00% 56.00% 51.00% 53.00% 63.00% 43.00% 63.00% 51.00% 63.00% 56.00% 61.00% 57.20%
55.00% 58.00% 52.00% 54.00% 63.00% 59.00% 55.00% 63.00% 50.00% 58.00% 53.00% 62.00% 58.00% 66.00% 67.00% 59.00% 64.00% 51.00% 61.00% 59.00% 64.00% 57.00% 50.00% 72.00% 61.00% 63.00% 71.00% ------ 59.00% 63.00% 60.00% 60.00% 62.00% 55.00% 64.00% 65.00% 68.00% 66.00% 67.00% 65.00% 62.00% 60.00% 59.00% 52.00% 64.00% 64.00% 61.00% 66.00% 60.00% 64.00% 60.63%
69.00% 61.00% 60.00% 60.00% 61.00% 65.00% 66.00% 62.00% 68.00% 64.00% 75.00% 66.00% 70.00% 62.00% 68.00% 76.00% 60.00% 69.00% 69.00% 73.00% 81.00% 67.00% 69.00% 72.00% 63.00% 83.00% 80.00% 73.00% ------ 71.00% 74.00% 55.00% 66.00% 62.00% 64.00% 71.00% 65.00% 63.00% 75.00% 73.00% 70.00% 78.00% 63.00% 78.00% 62.00% 66.00% 69.00% 67.00% 63.00% 75.00% 68.20%
58.00% 47.00% 51.00% 50.00% 52.00% 61.00% 67.00% 55.00% 65.00% 61.00% 54.00% 56.00% 55.00% 59.00% 58.00% 59.00% 52.00% 53.00% 63.00% 51.00% 66.00% 46.00% 54.00% 64.00% 58.00% 44.00% 68.00% 56.00% 46.00% ------ 56.00% 54.00% 51.00% 47.00% 52.00% 54.00% 48.00% 62.00% 52.00% 66.00% 58.00% 59.00% 59.00% 59.00% 57.00% 52.00% 57.00% 54.00% 57.00% 56.00% 55.90%
57.00% 49.00% 51.00% 61.00% 62.00% 60.00% 61.00% 57.00% 56.00% 63.00% 60.00% 64.00% 63.00% 72.00% 67.00% 67.00% 55.00% 61.00% 65.00% 61.00% 75.00% 54.00% 57.00% 74.00% 61.00% 66.00% 73.00% 65.00% 52.00% 65.00% ------ 56.00% 61.00% 63.00% 55.00% 57.00% 57.00% 62.00% 66.00% 56.00% 70.00% 72.00% 71.00% 65.00% 63.00% 61.00% 59.00% 62.00% 56.00% 58.00% 61.71%
57.00% 70.00% 61.00% 57.00% 56.00% 66.00% 67.00% 61.00% 59.00% 69.00% 64.00% 56.00% 58.00% 80.00% 66.00% 58.00% 60.00% 62.00% 68.00% 67.00% 73.00% 62.00% 62.00% 72.00% 60.00% 73.00% 72.00% 60.00% 61.00% 68.00% 69.00% ------ 60.00% 62.00% 57.00% 62.00% 65.00% 71.00% 68.00% 76.00% 64.00% 80.00% 62.00% 70.00% 63.00% 69.00% 62.00% 66.00% 68.00% 64.00% 64.96%
60.00% 49.00% 55.00% 54.00% 52.00% 77.00% 67.00% 60.00% 55.00% 67.00% 65.00% 57.00% 66.00% 75.00% 68.00% 56.00% 57.00% 60.00% 63.00% 72.00% 74.00% 53.00% 68.00% 78.00% 65.00% 62.00% 70.00% 64.00% 50.00% 62.00% 61.00% 63.00% ------ 67.00% 52.00% 65.00% 64.00% 61.00% 64.00% 68.00% 70.00% 60.00% 64.00% 74.00% 62.00% 64.00% 60.00% 63.00% 65.00% 55.00% 62.92%
65.00% 59.00% 58.00% 59.00% 66.00% 56.00% 61.00% 59.00% 53.00% 67.00% 66.00% 61.00% 62.00% 74.00% 65.00% 58.00% 63.00% 53.00% 69.00% 61.00% 68.00% 57.00% 63.00% 72.00% 61.00% 60.00% 64.00% 70.00% 67.00% 68.00% 62.00% 64.00% 72.00% ------ 65.00% 59.00% 50.00% 65.00% 70.00% 64.00% 66.00% 83.00% 62.00% 59.00% 70.00% 59.00% 59.00% 68.00% 64.00% 74.00% 63.67%
55.00% 61.00% 64.00% 56.00% 61.00% 66.00% 60.00% 65.00% 71.00% 60.00% 66.00% 61.00% 60.00% 73.00% 67.00% 65.00% 59.00% 55.00% 64.00% 57.00% 73.00% 67.00% 63.00% 70.00% 59.00% 71.00% 64.00% 75.00% 62.00% 74.00% 64.00% 62.00% 58.00% 70.00% ------ 66.00% 59.00% 69.00% 76.00% 72.00% 72.00% 74.00% 65.00% 61.00% 65.00% 58.00% 69.00% 61.00% 64.00% 64.00% 64.76%
71.00% 61.00% 65.00% 54.00% 43.00% 61.00% 72.00% 67.00% 76.00% 68.00% 64.00% 64.00% 61.00% 65.00% 68.00% 69.00% 63.00% 70.00% 69.00% 63.00% 82.00% 53.00% 65.00% 67.00% 59.00% 67.00% 75.00% 59.00% 53.00% 64.00% 70.00% 68.00% 69.00% 63.00% 57.00% ------ 75.00% 66.00% 69.00% 58.00% 65.00% 74.00% 60.00% 67.00% 63.00% 66.00% 69.00% 61.00% 57.00% 66.00% 64.92%
74.00% 60.00% 68.00% 62.00% 57.00% 65.00% 60.00% 56.00% 58.00% 57.00% 58.00% 61.00% 63.00% 64.00% 64.00% 60.00% 56.00% 61.00% 57.00% 59.00% 70.00% 56.00% 51.00% 68.00% 60.00% 76.00% 82.00% 69.00% 63.00% 66.00% 58.00% 57.00% 53.00% 62.00% 64.00% 52.00% ------ 63.00% 61.00% 62.00% 70.00% 72.00% 56.00% 68.00% 56.00% 60.00% 62.00% 58.00% 65.00% 65.00% 62.14%
66.00% 56.00% 60.00% 53.00% 57.00% 62.00% 54.00% 65.00% 58.00% 56.00% 54.00% 63.00% 58.00% 66.00% 57.00% 63.00% 54.00% 57.00% 60.00% 57.00% 77.00% 64.00% 58.00% 66.00% 65.00% 63.00% 78.00% 51.00% 51.00% 67.00% 61.00% 63.00% 64.00% 55.00% 57.00% 60.00% 63.00% ------ 68.00% 63.00% 67.00% 72.00% 69.00% 62.00% 60.00% 67.00% 62.00% 52.00% 71.00% 58.00% 61.43%
62.00% 65.00% 62.00% 54.00% 58.00% 73.00% 63.00% 56.00% 56.00% 61.00% 56.00% 63.00% 67.00% 66.00% 64.00% 58.00% 59.00% 48.00% 66.00% 62.00% 69.00% 59.00% 63.00% 70.00% 69.00% 57.00% 70.00% 62.00% 44.00% 65.00% 63.00% 66.00% 56.00% 62.00% 57.00% 56.00% 64.00% 61.00% ------ 58.00% 57.00% 68.00% 52.00% 57.00% 69.00% 61.00% 59.00% 55.00% 51.00% 60.00% 60.80%
62.00% 52.00% 56.00% 68.00% 61.00% 69.00% 61.00% 62.00% 62.00% 59.00% 62.00% 71.00% 66.00% 64.00% 66.00% 64.00% 55.00% 61.00% 69.00% 58.00% 68.00% 55.00% 56.00% 64.00% 63.00% 61.00% 74.00% 59.00% 61.00% 61.00% 66.00% 64.00% 56.00% 64.00% 66.00% 49.00% 71.00% 55.00% 57.00% ------ 67.00% 63.00% 53.00% 61.00% 57.00% 61.00% 63.00% 58.00% 53.00% 67.00% 61.65%
63.00% 50.00% 54.00% 53.00% 55.00% 56.00% 60.00% 56.00% 62.00% 60.00% 55.00% 46.00% 57.00% 65.00% 60.00% 62.00% 54.00% 56.00% 58.00% 58.00% 58.00% 53.00% 59.00% 63.00% 65.00% 56.00% 61.00% 59.00% 47.00% 63.00% 57.00% 53.00% 62.00% 55.00% 52.00% 49.00% 59.00% 63.00% 59.00% 62.00% ------ 62.00% 63.00% 57.00% 62.00% 62.00% 63.00% 61.00% 55.00% 47.00% 57.69%
60.00% 56.00% 63.00% 49.00% 61.00% 45.00% 59.00% 58.00% 54.00% 55.00% 67.00% 61.00% 62.00% 55.00% 57.00% 64.00% 50.00% 56.00% 57.00% 63.00% 70.00% 51.00% 58.00% 54.00% 58.00% 55.00% 66.00% 63.00% 51.00% 63.00% 61.00% 52.00% 56.00% 60.00% 64.00% 53.00% 67.00% 62.00% 65.00% 60.00% 70.00% ------ 66.00% 62.00% 57.00% 59.00% 64.00% 54.00% 62.00% 57.00% 59.02%
74.00% 60.00% 49.00% 49.00% 64.00% 69.00% 74.00% 63.00% 63.00% 70.00% 65.00% 60.00% 68.00% 65.00% 61.00% 69.00% 67.00% 50.00% 61.00% 69.00% 67.00% 53.00% 63.00% 76.00% 65.00% 67.00% 72.00% 67.00% 60.00% 75.00% 67.00% 57.00% 63.00% 62.00% 57.00% 59.00% 60.00% 62.00% 65.00% 64.00% 72.00% 74.00% ------ 70.00% 68.00% 75.00% 61.00% 61.00% 66.00% 64.00% 64.53%
74.00% 54.00% 55.00% 58.00% 59.00% 55.00% 64.00% 69.00% 71.00% 62.00% 52.00% 63.00% 50.00% 74.00% 69.00% 63.00% 51.00% 58.00% 67.00% 61.00% 67.00% 51.00% 69.00% 70.00% 49.00% 72.00% 68.00% 64.00% 53.00% 66.00% 63.00% 63.00% 55.00% 62.00% 59.00% 65.00% 60.00% 67.00% 67.00% 65.00% 72.00% 68.00% 57.00% ------ 63.00% 60.00% 64.00% 60.00% 73.00% 56.00% 62.39%
61.00% 57.00% 58.00% 46.00% 58.00% 60.00% 61.00% 61.00% 67.00% 73.00% 67.00% 59.00% 60.00% 74.00% 55.00% 66.00% 56.00% 63.00% 71.00% 56.00% 72.00% 61.00% 56.00% 69.00% 57.00% 63.00% 76.00% 71.00% 55.00% 66.00% 62.00% 64.00% 60.00% 58.00% 59.00% 69.00% 65.00% 64.00% 65.00% 65.00% 71.00% 63.00% 52.00% 58.00% ------ 65.00% 72.00% 59.00% 64.00% 58.00% 62.61%
68.00% 58.00% 59.00% 55.00% 60.00% 55.00% 64.00% 59.00% 68.00% 66.00% 67.00% 55.00% 64.00% 66.00% 66.00% 67.00% 66.00% 55.00% 72.00% 65.00% 76.00% 59.00% 60.00% 72.00% 57.00% 57.00% 69.00% 74.00% 58.00% 67.00% 65.00% 63.00% 66.00% 56.00% 60.00% 58.00% 67.00% 64.00% 55.00% 66.00% 67.00% 65.00% 57.00% 66.00% 64.00% ------ 53.00% 64.00% 62.00% 63.00% 62.96%
65.00% 55.00% 55.00% 67.00% 60.00% 64.00% 63.00% 62.00% 65.00% 52.00% 63.00% 62.00% 66.00% 67.00% 70.00% 62.00% 71.00% 53.00% 68.00% 70.00% 64.00% 66.00% 60.00% 72.00% 64.00% 55.00% 73.00% 74.00% 53.00% 74.00% 62.00% 66.00% 73.00% 58.00% 64.00% 65.00% 72.00% 69.00% 67.00% 69.00% 66.00% 71.00% 67.00% 68.00% 62.00% 66.00% ------ 69.00% 63.00% 59.00% 64.71%
69.00% 60.00% 63.00% 49.00% 60.00% 72.00% 59.00% 53.00% 58.00% 65.00% 68.00% 68.00% 62.00% 68.00% 65.00% 66.00% 58.00% 55.00% 60.00% 68.00% 74.00% 56.00% 58.00% 66.00% 67.00% 66.00% 78.00% 71.00% 55.00% 72.00% 64.00% 57.00% 71.00% 67.00% 64.00% 60.00% 62.00% 79.00% 71.00% 69.00% 61.00% 65.00% 59.00% 63.00% 65.00% 64.00% 65.00% ------ 70.00% 55.00% 64.08%
58.00% 53.00% 62.00% 53.00% 56.00% 63.00% 64.00% 68.00% 63.00% 63.00% 72.00% 60.00% 60.00% 65.00% 64.00% 67.00% 52.00% 58.00% 69.00% 63.00% 69.00% 59.00% 66.00% 70.00% 55.00% 64.00% 70.00% 63.00% 54.00% 67.00% 65.00% 55.00% 65.00% 62.00% 62.00% 51.00% 66.00% 64.00% 59.00% 62.00% 69.00% 69.00% 63.00% 66.00% 69.00% 65.00% 64.00% 63.00% ------ 60.00% 62.63%
69.00% 59.00% 58.00% 57.00% 70.00% 70.00% 67.00% 63.00% 64.00% 61.00% 68.00% 57.00% 66.00% 79.00% 70.00% 65.00% 58.00% 61.00% 79.00% 58.00% 75.00% 63.00% 52.00% 78.00% 74.00% 84.00% 72.00% 65.00% 61.00% 76.00% 65.00% 54.00% 66.00% 69.00% 64.00% 55.00% 66.00% 64.00% 61.00% 63.00% 76.00% 66.00% 60.00% 72.00% 56.00% 59.00% 68.00% 69.00% 56.00% ------ 65.47%
