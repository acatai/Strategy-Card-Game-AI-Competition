ELITISM 5
EVALUATOR_DRAFTS 10
EVALUATOR_ROUNDS 10
EVOLUTION_DRAFTS 100
EVOLUTION_ROUNDS 10
GENERATIONS 50
POPULATION 50
MUTATION_RATE 0.05
BinaryTreeIndividual

generation   1: 10.11s // best: BinaryTreeIndividual { card_node: OperatorMax(FeatureHasDrain, FeatureHasDrain), state_node: FeatureOpNextTurnDraw }
generation   2: 11.10s // best: BinaryTreeIndividual { card_node: FeatureHasDrain, state_node: OperatorMax(FeatureOpMaxMana, OperatorSub(FeatureMeDecksize, FeatureMeCurrentMana)) }
generation   3: 10.42s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain), FeatureHasCharge), state_node: FeatureOpNextTurnDraw }
generation   4: 10.36s // best: BinaryTreeIndividual { card_node: OperatorSub(OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain), FeatureHasCharge), state_node: FeatureOpNextTurnDraw }
generation   5: 11.46s // best: BinaryTreeIndividual { card_node: OperatorMax(OperatorAdd(FeatureHasDrain, FeatureHasDrain), FeatureHasBreakthrough), state_node: FeatureOpNextTurnDraw }
generation   6: 11.55s // best: BinaryTreeIndividual { card_node: OperatorMul(FeatureHasDrain, FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation   7: 12.84s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain), FeatureHasCharge), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation   8: 12.01s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain), FeatureHasCharge), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation   9: 12.90s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain), FeatureHasCharge), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation  10: 12.43s // best: BinaryTreeIndividual { card_node: OperatorAdd(FeatureHasDrain, OperatorMul(OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain), FeatureAttack)), state_node: FeatureOpNextTurnDraw }
generation  11: 12.89s // best: BinaryTreeIndividual { card_node: OperatorAdd(FeatureHasDrain, OperatorMul(OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain), FeatureAttack)), state_node: FeatureOpNextTurnDraw }
generation  12: 14.11s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain), FeatureHasBreakthrough), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation  13: 14.71s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain), FeatureHasBreakthrough), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation  14: 14.68s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain), FeatureHasBreakthrough), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation  15: 14.95s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain), FeatureHasBreakthrough), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation  16: 14.85s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, FeatureHasGuard), FeatureHasDrain), FeatureHasBreakthrough), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation  17: 13.42s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain), FeatureHasBreakthrough), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation  18: 14.34s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain))), FeatureHasDrain), FeatureHasBreakthrough), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation  19: 14.75s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain))), FeatureHasDrain), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation  20: 16.74s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain))), FeatureHasDrain), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation  21: 16.20s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorMul(OperatorSub(OperatorAdd(OperatorMin(OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorMul(FeatureHasGuard, FeatureAttack)), FeatureHasDrain), FeatureHasBreakthrough), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain))), FeatureHasDrain), FeatureHasBreakthrough), FeatureAttack), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation  22: 16.73s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), OperatorMin(FeatureDefense, OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain))), FeatureHasDrain))))), FeatureHasDrain), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation  23: 18.54s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain), FeatureHasDrain), FeatureDefense))), FeatureHasDrain), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation  24: 17.22s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), OperatorMin(FeatureDefense, OperatorAdd(OperatorMin(OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(OperatorMin(FeatureDefense, FeatureAttack), FeatureHasDrain)), FeatureHasDrain), FeatureHasBreakthrough), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain))), FeatureHasDrain))))), FeatureHasDrain), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation  25: 18.27s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(OperatorSub(OperatorMul(OperatorSub(OperatorAdd(FeatureAttack, FeatureHasDrain), FeatureHasBreakthrough), FeatureAttack), FeatureHasBreakthrough), FeatureHasDrain), FeatureDefense))), FeatureHasDrain), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation  26: 18.48s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), OperatorMin(FeatureDefense, OperatorAdd(OperatorMin(OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(OperatorMin(FeatureDefense, FeatureAttack), FeatureHasDrain)), FeatureHasDrain), FeatureHasBreakthrough), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain))), FeatureHasGuard))))), FeatureHasDrain), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation  27: 20.54s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(OperatorAdd(OperatorMin(FeatureHasLethal, FeatureHasGuard), FeatureHasDrain), FeatureHasDrain), FeatureDefense))), FeatureHasDrain), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation  28: 24.34s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), OperatorMin(FeatureDefense, OperatorAdd(OperatorMin(OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(OperatorMin(FeatureDefense, FeatureAttack), FeatureHasDrain)), FeatureHasDrain), FeatureHasBreakthrough), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain))), FeatureHasDrain))))), FeatureHasDrain), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), OperatorAdd(FeatureAttack, FeatureHasDrain)), state_node: FeatureOpNextTurnDraw }
generation  29: 26.93s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), OperatorMin(FeatureDefense, OperatorAdd(OperatorMin(OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(OperatorMin(FeatureDefense, FeatureAttack), FeatureHasDrain)), FeatureHasDrain), FeatureHasBreakthrough), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain))), FeatureHasDrain))))), FeatureHasDrain), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), OperatorAdd(FeatureAttack, FeatureHasDrain)), state_node: FeatureOpNextTurnDraw }
generation  30: 28.66s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(OperatorSub(OperatorMul(OperatorSub(OperatorAdd(FeatureAttack, FeatureHasDrain), FeatureDefense), FeatureAttack), FeatureHasBreakthrough), FeatureHasDrain), FeatureDefense))), FeatureHasDrain), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation  31: 27.91s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(OperatorSub(OperatorMul(OperatorSub(OperatorAdd(FeatureAttack, FeatureHasDrain), FeatureDefense), FeatureAttack), FeatureHasBreakthrough), FeatureHasDrain), FeatureDefense))), FeatureHasDrain), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation  32: 28.71s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(FeatureHasDrain, FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation  33: 28.92s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorMul(OperatorSub(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), OperatorMin(FeatureDefense, OperatorAdd(OperatorMin(OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(OperatorMin(FeatureDefense, FeatureAttack), FeatureHasBreakthrough)), FeatureHasDrain), FeatureHasBreakthrough), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorAdd(OperatorMin(FeatureHasWard, FeatureHasLethal), OperatorSub(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasBreakthrough)), FeatureHasDrain))), FeatureHasGuard))))), FeatureHasDrain), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureHasBreakthrough), FeatureAttack), FeatureHasBreakthrough), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation  34: 28.05s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(FeatureHasDrain, FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation  35: 32.29s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(FeatureHasDrain, FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation  36: 32.79s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(FeatureHasDrain, FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation  37: 34.21s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorMul(OperatorSub(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(OperatorAdd(OperatorMin(OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, FeatureHasDrain), FeatureHasDrain), FeatureHasBreakthrough), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain))), FeatureHasDrain), OperatorAdd(OperatorMin(FeatureHasCharge, FeatureHasGuard), OperatorMin(FeatureDefense, OperatorAdd(OperatorMin(OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(OperatorMin(FeatureDefense, FeatureAttack), FeatureHasBreakthrough)), FeatureHasDrain), FeatureHasBreakthrough), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorAdd(OperatorMin(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureAttack), OperatorSub(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasBreakthrough)), FeatureHasDrain))), FeatureHasGuard))))), FeatureHasDrain), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureHasBreakthrough), FeatureAttack), FeatureHasBreakthrough), FeatureAttack), state_node: OperatorMul(FeatureOpNextTurnDraw, FeatureOpNextTurnDraw) }
generation  38: 36.81s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorMul(OperatorSub(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(OperatorAdd(OperatorMin(OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, FeatureHasDrain), FeatureHasDrain), FeatureHasBreakthrough), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain))), FeatureHasDrain), OperatorAdd(OperatorMin(FeatureHasCharge, FeatureHasGuard), OperatorMin(FeatureDefense, OperatorAdd(OperatorMin(OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(OperatorMin(FeatureDefense, FeatureAttack), FeatureHasBreakthrough)), FeatureHasDrain), FeatureHasBreakthrough), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorAdd(OperatorMin(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureAttack), OperatorSub(OperatorMin(FeatureHasBreakthrough, FeatureHasGuard), FeatureHasBreakthrough)), FeatureHasDrain))), FeatureHasGuard))))), FeatureHasDrain), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureHasBreakthrough), FeatureAttack), FeatureHasBreakthrough), FeatureAttack), state_node: OperatorMul(FeatureOpNextTurnDraw, FeatureOpNextTurnDraw) }
generation  39: 34.93s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorMul(OperatorSub(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(OperatorAdd(OperatorMin(OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, FeatureHasDrain), FeatureHasDrain), FeatureHasBreakthrough), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain))), FeatureHasDrain), OperatorAdd(OperatorMin(FeatureHasCharge, FeatureHasGuard), OperatorMin(FeatureDefense, OperatorAdd(OperatorMin(FeatureHasDrain, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorAdd(OperatorMin(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureAttack), OperatorSub(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasBreakthrough)), FeatureHasDrain))), FeatureHasGuard))))), FeatureHasDrain), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureHasBreakthrough), FeatureAttack), FeatureHasBreakthrough), FeatureAttack), state_node: OperatorMul(FeatureOpNextTurnDraw, FeatureOpNextTurnDraw) }
generation  40: 39.64s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorMul(OperatorSub(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(OperatorAdd(OperatorMin(FeatureHasBreakthrough, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), OperatorMin(FeatureDefense, OperatorAdd(OperatorMin(OperatorAdd(FeatureHasGuard, FeatureDefense), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorAdd(OperatorMin(FeatureHasWard, FeatureHasLethal), OperatorSub(OperatorMin(FeatureHasBreakthrough, FeatureHasGuard), FeatureHasBreakthrough)), FeatureHasDrain))), FeatureHasGuard))))), FeatureHasDrain), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureHasBreakthrough), FeatureAttack), FeatureHasBreakthrough), FeatureAttack), state_node: OperatorMin(OperatorSub(FeatureOpNextTurnDraw, FeatureOpMaxMana), OperatorSub(FeatureOpNextTurnDraw, FeatureOpMaxMana)) }
generation  41: 43.25s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorMul(OperatorSub(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(OperatorAdd(OperatorMin(OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, FeatureHasDrain), FeatureHasDrain), FeatureHasBreakthrough), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain))), FeatureHasDrain), OperatorAdd(OperatorMin(FeatureHasCharge, FeatureHasGuard), OperatorMin(FeatureDefense, OperatorAdd(OperatorMin(OperatorSub(OperatorAdd(FeatureHasGuard, FeatureHasDrain), FeatureHasBreakthrough), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain))), FeatureHasGuard))))), FeatureHasDrain), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureHasBreakthrough), FeatureAttack), FeatureHasBreakthrough), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation  42: 44.92s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorAdd(OperatorMin(OperatorSub(OperatorMul(OperatorSub(OperatorAdd(FeatureAttack, FeatureHasDrain), FeatureDefense), FeatureHasDrain), FeatureHasBreakthrough), OperatorSub(OperatorAdd(OperatorMin(FeatureAttack, OperatorAdd(FeatureHasDrain, OperatorAdd(FeatureHasGuard, FeatureDefense))), OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), OperatorMin(FeatureHasDrain, OperatorAdd(OperatorMin(OperatorAdd(FeatureHasGuard, FeatureDefense), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorAdd(OperatorMin(FeatureHasWard, OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, FeatureHasBreakthrough), FeatureHasDrain), FeatureHasDrain)), OperatorSub(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasBreakthrough)), FeatureHasDrain))), FeatureHasGuard)))))), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation  43: 48.40s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorMul(OperatorSub(OperatorSub(OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), OperatorMin(FeatureDefense, OperatorAdd(OperatorMin(OperatorSub(OperatorMul(FeatureHasGuard, FeatureAttack), FeatureHasBreakthrough), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasDrain))), OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(FeatureHasGuard, FeatureDefense))), OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorMin(OperatorSub(OperatorAdd(FeatureHasBreakthrough, FeatureHasDrain), FeatureHasBreakthrough), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), OperatorMin(FeatureDefense, OperatorAdd(OperatorMin(OperatorAdd(FeatureHasGuard, FeatureHasDrain), FeatureHasWard), FeatureHasGuard)))))), FeatureHasGuard), FeatureHasBreakthrough))))))), FeatureHasDrain), FeatureHasBreakthrough), FeatureHasBreakthrough), FeatureHasBreakthrough), FeatureAttack), FeatureHasBreakthrough), FeatureAttack), state_node: FeatureOpNextTurnDraw }
generation  44: 51.40s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorMul(OperatorSub(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(OperatorAdd(OperatorMin(OperatorSub(OperatorMul(OperatorSub(OperatorAdd(FeatureAttack, FeatureHasDrain), FeatureDefense), FeatureAttack), FeatureHasBreakthrough), OperatorSub(OperatorAdd(OperatorMin(FeatureAttack, OperatorAdd(FeatureHasDrain, OperatorAdd(FeatureHasGuard, FeatureDefense))), OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureHasBreakthrough, FeatureHasGuard), OperatorMin(FeatureDefense, OperatorAdd(OperatorMin(OperatorAdd(FeatureHasGuard, FeatureDefense), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorAdd(OperatorMin(FeatureHasWard, FeatureHasLethal), OperatorSub(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasBreakthrough)), FeatureHasDrain))), OperatorMin(FeatureHasGuard, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasBreakthrough)))))))), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasGuard), OperatorMin(FeatureDefense, OperatorAdd(OperatorMin(OperatorAdd(FeatureHasGuard, OperatorMin(OperatorMin(OperatorSub(FeatureHasGuard, FeatureHasBreakthrough), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(OperatorMin(FeatureHasBreakthrough, FeatureHasGuard), FeatureHasGuard), FeatureHasDrain))), FeatureHasLethal)), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorAdd(OperatorMin(FeatureHasWard, FeatureHasLethal), OperatorSub(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasBreakthrough)), FeatureHasDrain))), FeatureHasGuard))))), FeatureHasDrain), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureHasBreakthrough), FeatureAttack), FeatureHasBreakthrough), FeatureAttack), state_node: OperatorMin(FeatureOpNextTurnDraw, OperatorSub(OperatorMul(OperatorMul(FeatureOpNextTurnDraw, FeatureOpMaxMana), FeatureOpNextTurnDraw), FeatureOpMaxMana)) }
generation  45: 51.07s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorMul(OperatorSub(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(OperatorAdd(OperatorMin(OperatorSub(OperatorMul(OperatorSub(OperatorAdd(FeatureAttack, FeatureHasDrain), FeatureDefense), FeatureAttack), FeatureHasBreakthrough), OperatorSub(OperatorAdd(OperatorMin(FeatureAttack, OperatorAdd(FeatureHasDrain, OperatorAdd(FeatureHasGuard, FeatureDefense))), OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureHasBreakthrough, FeatureHasGuard), OperatorMin(FeatureDefense, OperatorAdd(OperatorMin(OperatorAdd(FeatureHasGuard, FeatureDefense), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorAdd(OperatorMin(FeatureHasWard, FeatureHasLethal), OperatorSub(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasBreakthrough)), FeatureHasDrain))), OperatorMin(FeatureHasGuard, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasBreakthrough)))))))), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasGuard), OperatorMin(FeatureDefense, OperatorAdd(OperatorMin(OperatorAdd(FeatureHasGuard, OperatorMin(OperatorMin(OperatorSub(FeatureHasGuard, FeatureHasBreakthrough), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(OperatorMin(FeatureHasBreakthrough, FeatureHasGuard), FeatureHasGuard), FeatureHasDrain))), FeatureHasLethal)), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorAdd(OperatorMin(FeatureHasWard, FeatureHasLethal), OperatorSub(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasBreakthrough)), FeatureHasDrain))), FeatureHasGuard))))), FeatureHasDrain), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureHasBreakthrough), FeatureAttack), FeatureHasBreakthrough), FeatureAttack), state_node: OperatorMin(FeatureOpNextTurnDraw, OperatorSub(OperatorMul(OperatorMul(FeatureOpNextTurnDraw, FeatureOpMaxMana), FeatureOpNextTurnDraw), FeatureOpMaxMana)) }
generation  46: 49.29s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorMul(OperatorSub(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(OperatorAdd(OperatorMin(FeatureHasBreakthrough, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), OperatorMin(FeatureDefense, OperatorAdd(OperatorMin(OperatorAdd(FeatureHasGuard, FeatureDefense), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorAdd(OperatorMin(FeatureHasWard, FeatureHasLethal), OperatorSub(OperatorMin(FeatureHasBreakthrough, FeatureHasGuard), FeatureHasCharge)), FeatureHasDrain))), FeatureHasGuard))))), FeatureHasDrain), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureHasBreakthrough), FeatureAttack), FeatureHasBreakthrough), FeatureAttack), state_node: OperatorMin(OperatorSub(FeatureOpNextTurnDraw, FeatureOpMaxMana), OperatorSub(FeatureOpNextTurnDraw, FeatureOpMaxMana)) }
generation  47: 54.24s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorMul(OperatorSub(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(OperatorAdd(OperatorMin(OperatorSub(OperatorMul(OperatorSub(OperatorAdd(FeatureAttack, FeatureHasDrain), FeatureDefense), FeatureAttack), FeatureHasBreakthrough), OperatorSub(OperatorAdd(OperatorMin(FeatureAttack, OperatorAdd(FeatureHasDrain, OperatorAdd(FeatureHasGuard, FeatureDefense))), OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureHasBreakthrough, FeatureHasGuard), OperatorMin(FeatureDefense, OperatorAdd(OperatorMin(OperatorAdd(FeatureHasGuard, FeatureDefense), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorAdd(OperatorMin(FeatureHasWard, FeatureHasLethal), OperatorSub(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasBreakthrough)), FeatureHasDrain))), OperatorMin(FeatureHasGuard, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasBreakthrough)))))))), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasGuard), OperatorMin(FeatureDefense, OperatorAdd(OperatorMin(OperatorAdd(FeatureHasGuard, OperatorMin(OperatorMin(OperatorSub(FeatureHasGuard, FeatureHasBreakthrough), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(OperatorMin(FeatureHasBreakthrough, FeatureHasGuard), FeatureHasGuard), FeatureHasDrain))), FeatureHasLethal)), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorAdd(OperatorMin(FeatureHasWard, FeatureHasLethal), OperatorSub(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasBreakthrough)), FeatureHasDrain))), FeatureHasGuard))))), FeatureHasDrain), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureHasBreakthrough), FeatureAttack), FeatureHasBreakthrough), FeatureAttack), state_node: OperatorMin(FeatureOpNextTurnDraw, OperatorSub(OperatorMul(OperatorMul(FeatureOpNextTurnDraw, FeatureOpMaxMana), FeatureOpNextTurnDraw), FeatureOpMaxMana)) }
generation  48: 47.68s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorMul(OperatorSub(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(OperatorAdd(OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(OperatorAdd(OperatorMin(OperatorSub(OperatorMul(OperatorSub(OperatorAdd(FeatureAttack, FeatureHasDrain), FeatureDefense), FeatureAttack), FeatureHasBreakthrough), OperatorSub(OperatorAdd(OperatorMin(FeatureAttack, OperatorAdd(FeatureHasDrain, OperatorAdd(FeatureHasGuard, FeatureDefense))), OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureHasBreakthrough, FeatureHasGuard), OperatorMin(FeatureDefense, OperatorAdd(OperatorMin(OperatorAdd(FeatureHasGuard, FeatureDefense), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorAdd(OperatorMin(FeatureHasWard, FeatureHasLethal), OperatorSub(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasBreakthrough)), FeatureHasDrain))), OperatorMin(FeatureHasGuard, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasBreakthrough)))))))), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasGuard), OperatorMin(FeatureDefense, OperatorAdd(OperatorMin(OperatorAdd(FeatureHasGuard, OperatorMin(OperatorMin(OperatorSub(FeatureHasGuard, FeatureHasBreakthrough), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(OperatorMin(FeatureHasBreakthrough, FeatureHasGuard), FeatureHasGuard), FeatureHasDrain))), FeatureHasLethal)), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorAdd(OperatorMin(FeatureHasWard, FeatureHasLethal), OperatorSub(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasBreakthrough)), FeatureHasDrain))), FeatureHasGuard))))), FeatureHasDrain), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureHasBreakthrough), FeatureAttack), FeatureHasBreakthrough), FeatureAttack), state_node: OperatorMin(FeatureOpNextTurnDraw, OperatorSub(OperatorMul(OperatorMul(FeatureOpNextTurnDraw, FeatureOpMaxMana), FeatureOpNextTurnDraw), FeatureOpMaxMana)) }
generation  49: 48.56s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorMul(OperatorSub(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(OperatorAdd(OperatorMin(FeatureHasBreakthrough, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), OperatorMin(FeatureDefense, OperatorAdd(OperatorMin(FeatureHasGuard, OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(OperatorAdd(OperatorMin(OperatorSub(OperatorMul(OperatorSub(FeatureAttack, FeatureDefense), FeatureAttack), FeatureHasBreakthrough), OperatorSub(OperatorAdd(OperatorMin(FeatureAttack, OperatorAdd(FeatureHasDrain, OperatorAdd(FeatureHasGuard, FeatureDefense))), OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureHasBreakthrough, FeatureHasGuard), OperatorMin(FeatureDefense, OperatorAdd(OperatorMin(OperatorAdd(FeatureHasGuard, FeatureDefense), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorAdd(OperatorMin(FeatureHasWard, FeatureHasLethal), OperatorSub(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasBreakthrough)), FeatureHasDrain))), OperatorMin(FeatureHasGuard, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasBreakthrough)))))))), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasGuard), OperatorMin(FeatureDefense, OperatorAdd(OperatorMin(OperatorAdd(FeatureHasGuard, OperatorMin(OperatorMin(OperatorSub(FeatureHasGuard, FeatureHasBreakthrough), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(OperatorMin(FeatureHasBreakthrough, FeatureHasGuard), FeatureHasGuard), FeatureHasDrain))), FeatureHasLethal)), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorAdd(OperatorMin(FeatureHasWard, FeatureHasLethal), OperatorSub(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasBreakthrough)), FeatureHasDrain))), FeatureHasGuard)))))), FeatureHasGuard))))), FeatureHasDrain), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureHasBreakthrough), FeatureAttack), FeatureHasBreakthrough), FeatureAttack), state_node: OperatorMin(OperatorSub(FeatureOpNextTurnDraw, FeatureOpNextTurnDraw), OperatorSub(FeatureOpNextTurnDraw, FeatureOpMaxMana)) }
generation  50: 65.81s // best: BinaryTreeIndividual { card_node: OperatorMul(OperatorSub(OperatorMul(OperatorSub(OperatorSub(OperatorAdd(OperatorMin(FeatureHasDrain, OperatorSub(OperatorAdd(OperatorMin(FeatureHasBreakthrough, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), OperatorMin(FeatureDefense, OperatorAdd(OperatorMin(FeatureHasGuard, OperatorMin(FeatureHasGuard, OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(OperatorAdd(OperatorMin(OperatorSub(OperatorMul(OperatorSub(FeatureAttack, FeatureDefense), FeatureAttack), FeatureHasBreakthrough), OperatorSub(OperatorAdd(OperatorMin(FeatureAttack, OperatorAdd(FeatureHasDrain, OperatorAdd(FeatureHasGuard, FeatureDefense))), OperatorMin(FeatureHasGuard, OperatorMul(OperatorAdd(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasBreakthrough), FeatureAttack))), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasGuard), OperatorMin(FeatureDefense, OperatorAdd(OperatorMin(OperatorAdd(FeatureHasGuard, OperatorMin(OperatorMin(OperatorSub(FeatureHasGuard, FeatureHasBreakthrough), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorMin(OperatorMin(FeatureHasBreakthrough, FeatureHasGuard), FeatureHasGuard), FeatureHasDrain))), FeatureHasLethal)), OperatorAdd(FeatureHasDrain, OperatorAdd(OperatorAdd(OperatorMin(FeatureHasWard, FeatureHasLethal), OperatorSub(OperatorMin(FeatureDefense, FeatureHasGuard), FeatureHasBreakthrough)), FeatureHasDrain))), FeatureHasGuard)))))), FeatureHasGuard))))), FeatureHasDrain), FeatureHasBreakthrough)), FeatureHasGuard), FeatureHasBreakthrough), FeatureHasBreakthrough), FeatureAttack), FeatureHasBreakthrough), FeatureAttack), state_node: OperatorMin(OperatorSub(FeatureOpNextTurnDraw, FeatureOpNextTurnDraw), OperatorSub(FeatureOpNextTurnDraw, FeatureOpMaxMana)) }
------ 45.00% 43.00% 48.00% 38.00% 46.00% 11.00% 16.00% 17.00% 23.00% 21.00% 37.00% 30.00% 39.00% 42.00% 37.00% 40.00% 28.00% 36.00% 36.00% 39.00% 44.00% 48.00% 37.00% 39.00% 41.00% 47.00% 43.00% 49.00% 54.00% 52.00% 51.00% 52.00% 45.00% 54.00% 45.00% 41.00% 40.00% 48.00% 59.00% 46.00% 48.00% 44.00% 67.00% 56.00% 41.00% 59.00% 61.00% 58.00% 67.00% 43.02%
61.00% ------ 51.00% 58.00% 45.00% 61.00% 29.00% 30.00% 22.00% 30.00% 32.00% 47.00% 47.00% 46.00% 45.00% 52.00% 40.00% 55.00% 48.00% 55.00% 49.00% 56.00% 44.00% 51.00% 51.00% 47.00% 52.00% 47.00% 51.00% 67.00% 68.00% 57.00% 62.00% 50.00% 53.00% 52.00% 53.00% 53.00% 58.00% 47.00% 55.00% 55.00% 54.00% 64.00% 69.00% 52.00% 70.00% 66.00% 59.00% 67.00% 51.69%
66.00% 56.00% ------ 58.00% 55.00% 60.00% 28.00% 21.00% 22.00% 31.00% 25.00% 57.00% 51.00% 49.00% 58.00% 50.00% 47.00% 54.00% 59.00% 54.00% 62.00% 54.00% 58.00% 53.00% 48.00% 60.00% 47.00% 51.00% 55.00% 75.00% 69.00% 74.00% 73.00% 70.00% 74.00% 72.00% 75.00% 63.00% 69.00% 65.00% 67.00% 74.00% 67.00% 90.00% 85.00% 67.00% 92.00% 86.00% 94.00% 80.00% 60.61%
66.00% 50.00% 58.00% ------ 51.00% 53.00% 22.00% 30.00% 20.00% 24.00% 27.00% 48.00% 53.00% 51.00% 55.00% 48.00% 45.00% 54.00% 58.00% 59.00% 60.00% 58.00% 57.00% 61.00% 61.00% 54.00% 64.00% 54.00% 58.00% 76.00% 73.00% 59.00% 69.00% 67.00% 77.00% 71.00% 65.00% 76.00% 76.00% 67.00% 64.00% 72.00% 69.00% 86.00% 88.00% 71.00% 86.00% 89.00% 86.00% 83.00% 60.59%
62.00% 68.00% 58.00% 58.00% ------ 66.00% 29.00% 26.00% 26.00% 32.00% 33.00% 42.00% 42.00% 36.00% 45.00% 38.00% 35.00% 44.00% 49.00% 35.00% 38.00% 36.00% 43.00% 35.00% 41.00% 34.00% 39.00% 39.00% 32.00% 49.00% 47.00% 48.00% 41.00% 43.00% 46.00% 45.00% 40.00% 47.00% 32.00% 45.00% 48.00% 56.00% 40.00% 46.00% 52.00% 51.00% 50.00% 52.00% 56.00% 46.00% 43.69%
66.00% 49.00% 54.00% 42.00% 43.00% ------ 20.00% 25.00% 32.00% 18.00% 20.00% 44.00% 47.00% 38.00% 44.00% 37.00% 43.00% 35.00% 56.00% 54.00% 40.00% 38.00% 47.00% 43.00% 38.00% 43.00% 52.00% 48.00% 51.00% 59.00% 58.00% 51.00% 56.00% 49.00% 49.00% 61.00% 57.00% 48.00% 50.00% 53.00% 59.00% 53.00% 49.00% 68.00% 69.00% 58.00% 68.00% 62.00% 70.00% 65.00% 48.55%
83.00% 82.00% 82.00% 78.00% 83.00% 83.00% ------ 57.00% 58.00% 60.00% 52.00% 79.00% 77.00% 76.00% 83.00% 81.00% 77.00% 83.00% 81.00% 80.00% 85.00% 83.00% 81.00% 79.00% 84.00% 85.00% 83.00% 78.00% 83.00% 83.00% 87.00% 86.00% 91.00% 86.00% 95.00% 88.00% 92.00% 93.00% 94.00% 95.00% 92.00% 92.00% 91.00% 96.00% 94.00% 87.00% 95.00% 90.00% 95.00% 94.00% 83.51%
84.00% 81.00% 81.00% 81.00% 86.00% 83.00% 49.00% ------ 52.00% 54.00% 60.00% 73.00% 82.00% 84.00% 84.00% 83.00% 81.00% 80.00% 80.00% 82.00% 81.00% 93.00% 89.00% 77.00% 79.00% 79.00% 80.00% 80.00% 88.00% 89.00% 88.00% 98.00% 91.00% 90.00% 88.00% 95.00% 92.00% 88.00% 92.00% 92.00% 90.00% 94.00% 93.00% 96.00% 96.00% 93.00% 97.00% 94.00% 96.00% 95.00% 84.35%
89.00% 80.00% 83.00% 86.00% 78.00% 85.00% 52.00% 48.00% ------ 59.00% 48.00% 81.00% 80.00% 77.00% 83.00% 86.00% 80.00% 75.00% 81.00% 89.00% 83.00% 72.00% 85.00% 87.00% 79.00% 82.00% 85.00% 87.00% 90.00% 91.00% 91.00% 90.00% 92.00% 85.00% 91.00% 87.00% 86.00% 87.00% 95.00% 92.00% 87.00% 93.00% 87.00% 96.00% 96.00% 90.00% 94.00% 98.00% 94.00% 91.00% 83.73%
87.00% 87.00% 80.00% 79.00% 71.00% 83.00% 53.00% 52.00% 59.00% ------ 59.00% 79.00% 79.00% 80.00% 70.00% 79.00% 70.00% 78.00% 75.00% 84.00% 78.00% 85.00% 70.00% 76.00% 78.00% 84.00% 82.00% 84.00% 81.00% 80.00% 91.00% 92.00% 92.00% 82.00% 89.00% 85.00% 96.00% 80.00% 92.00% 89.00% 94.00% 90.00% 93.00% 96.00% 91.00% 87.00% 94.00% 93.00% 92.00% 93.00% 81.90%
88.00% 76.00% 83.00% 75.00% 84.00% 87.00% 58.00% 56.00% 62.00% 56.00% ------ 77.00% 78.00% 77.00% 76.00% 78.00% 86.00% 81.00% 81.00% 78.00% 80.00% 83.00% 79.00% 84.00% 81.00% 84.00% 80.00% 87.00% 86.00% 91.00% 84.00% 85.00% 87.00% 91.00% 85.00% 92.00% 86.00% 89.00% 87.00% 93.00% 88.00% 96.00% 86.00% 95.00% 96.00% 87.00% 99.00% 88.00% 99.00% 96.00% 83.29%
65.00% 59.00% 59.00% 43.00% 73.00% 76.00% 30.00% 26.00% 30.00% 21.00% 24.00% ------ 55.00% 40.00% 52.00% 52.00% 50.00% 54.00% 52.00% 54.00% 51.00% 57.00% 57.00% 53.00% 56.00% 59.00% 60.00% 55.00% 65.00% 79.00% 75.00% 67.00% 74.00% 68.00% 82.00% 69.00% 71.00% 69.00% 64.00% 64.00% 68.00% 75.00% 65.00% 94.00% 88.00% 63.00% 86.00% 92.00% 81.00% 88.00% 61.43%
70.00% 58.00% 56.00% 53.00% 72.00% 65.00% 25.00% 26.00% 30.00% 29.00% 27.00% 58.00% ------ 49.00% 48.00% 57.00% 49.00% 53.00% 53.00% 56.00% 53.00% 53.00% 61.00% 53.00% 59.00% 53.00% 53.00% 49.00% 59.00% 78.00% 82.00% 72.00% 74.00% 48.00% 63.00% 61.00% 67.00% 66.00% 64.00% 73.00% 72.00% 79.00% 63.00% 88.00% 90.00% 60.00% 95.00% 90.00% 89.00% 86.00% 60.96%
66.00% 55.00% 51.00% 46.00% 68.00% 77.00% 28.00% 23.00% 31.00% 25.00% 19.00% 47.00% 57.00% ------ 51.00% 47.00% 43.00% 57.00% 60.00% 56.00% 50.00% 59.00% 40.00% 60.00% 51.00% 55.00% 53.00% 55.00% 60.00% 73.00% 79.00% 72.00% 63.00% 65.00% 65.00% 59.00% 71.00% 71.00% 68.00% 62.00% 70.00% 84.00% 67.00% 86.00% 86.00% 72.00% 86.00% 82.00% 86.00% 85.00% 60.04%
73.00% 64.00% 55.00% 50.00% 78.00% 68.00% 30.00% 22.00% 24.00% 22.00% 27.00% 42.00% 53.00% 51.00% ------ 55.00% 52.00% 47.00% 51.00% 55.00% 54.00% 55.00% 56.00% 50.00% 65.00% 57.00% 61.00% 50.00% 58.00% 74.00% 82.00% 65.00% 62.00% 66.00% 68.00% 75.00% 67.00% 69.00% 56.00% 66.00% 65.00% 76.00% 70.00% 92.00% 90.00% 65.00% 85.00% 89.00% 90.00% 91.00% 60.98%
58.00% 64.00% 59.00% 53.00% 63.00% 62.00% 22.00% 30.00% 27.00% 26.00% 32.00% 54.00% 53.00% 39.00% 45.00% ------ 48.00% 47.00% 55.00% 53.00% 53.00% 60.00% 64.00% 61.00% 62.00% 56.00% 62.00% 65.00% 62.00% 74.00% 74.00% 70.00% 57.00% 63.00% 68.00% 69.00% 61.00% 60.00% 68.00% 65.00% 66.00% 77.00% 61.00% 89.00% 86.00% 68.00% 87.00% 88.00% 96.00% 87.00% 60.59%
71.00% 59.00% 56.00% 57.00% 64.00% 65.00% 28.00% 29.00% 27.00% 30.00% 26.00% 51.00% 49.00% 51.00% 43.00% 51.00% ------ 47.00% 56.00% 49.00% 50.00% 58.00% 53.00% 66.00% 37.00% 47.00% 58.00% 63.00% 57.00% 70.00% 67.00% 61.00% 68.00% 72.00% 61.00% 72.00% 72.00% 61.00% 63.00% 72.00% 64.00% 79.00% 70.00% 88.00% 92.00% 53.00% 85.00% 85.00% 85.00% 92.00% 59.80%
63.00% 65.00% 59.00% 49.00% 74.00% 73.00% 30.00% 23.00% 27.00% 29.00% 31.00% 44.00% 59.00% 61.00% 46.00% 53.00% 49.00% ------ 49.00% 51.00% 59.00% 48.00% 48.00% 46.00% 66.00% 51.00% 50.00% 67.00% 58.00% 74.00% 62.00% 64.00% 69.00% 59.00% 65.00% 66.00% 68.00% 69.00% 58.00% 67.00% 67.00% 78.00% 66.00% 90.00% 88.00% 65.00% 91.00% 86.00% 88.00% 86.00% 60.29%
70.00% 55.00% 52.00% 46.00% 71.00% 64.00% 19.00% 17.00% 21.00% 26.00% 18.00% 40.00% 45.00% 43.00% 54.00% 53.00% 40.00% 49.00% ------ 55.00% 53.00% 53.00% 49.00% 57.00% 46.00% 46.00% 45.00% 48.00% 70.00% 72.00% 70.00% 61.00% 53.00% 58.00% 59.00% 69.00% 64.00% 63.00% 69.00% 62.00% 62.00% 72.00% 60.00% 83.00% 92.00% 67.00% 89.00% 83.00% 89.00% 82.00% 56.82%
67.00% 55.00% 42.00% 34.00% 77.00% 64.00% 22.00% 27.00% 21.00% 24.00% 23.00% 46.00% 48.00% 45.00% 45.00% 40.00% 43.00% 52.00% 52.00% ------ 45.00% 50.00% 54.00% 45.00% 43.00% 52.00% 50.00% 51.00% 55.00% 73.00% 69.00% 66.00% 67.00% 53.00% 67.00% 63.00% 70.00% 62.00% 64.00% 66.00% 70.00% 71.00% 65.00% 89.00% 80.00% 66.00% 84.00% 95.00% 85.00% 86.00% 56.80%
69.00% 64.00% 52.00% 53.00% 72.00% 65.00% 19.00% 18.00% 27.00% 27.00% 22.00% 46.00% 43.00% 51.00% 58.00% 40.00% 49.00% 39.00% 50.00% 55.00% ------ 55.00% 47.00% 53.00% 47.00% 52.00% 55.00% 49.00% 48.00% 66.00% 75.00% 63.00% 62.00% 61.00% 61.00% 62.00% 70.00% 70.00% 67.00% 54.00% 58.00% 79.00% 66.00% 84.00% 91.00% 58.00% 88.00% 89.00% 90.00% 90.00% 57.73%
71.00% 63.00% 53.00% 55.00% 73.00% 55.00% 18.00% 23.00% 15.00% 20.00% 26.00% 48.00% 46.00% 42.00% 43.00% 49.00% 47.00% 36.00% 51.00% 51.00% 53.00% ------ 55.00% 49.00% 54.00% 48.00% 55.00% 51.00% 63.00% 70.00% 75.00% 65.00% 66.00% 63.00% 68.00% 63.00% 64.00% 65.00% 67.00% 64.00% 66.00% 78.00% 66.00% 85.00% 90.00% 56.00% 89.00% 87.00% 88.00% 85.00% 57.82%
61.00% 55.00% 50.00% 46.00% 72.00% 60.00% 19.00% 13.00% 20.00% 33.00% 38.00% 49.00% 53.00% 46.00% 59.00% 41.00% 43.00% 50.00% 45.00% 52.00% 57.00% 45.00% ------ 45.00% 51.00% 41.00% 57.00% 59.00% 58.00% 69.00% 80.00% 61.00% 71.00% 64.00% 65.00% 63.00% 59.00% 69.00% 64.00% 66.00% 71.00% 74.00% 70.00% 89.00% 91.00% 67.00% 83.00% 85.00% 87.00% 88.00% 58.24%
67.00% 50.00% 50.00% 46.00% 71.00% 63.00% 24.00% 22.00% 20.00% 31.00% 29.00% 44.00% 44.00% 46.00% 44.00% 49.00% 47.00% 50.00% 53.00% 50.00% 53.00% 56.00% 51.00% ------ 50.00% 54.00% 55.00% 47.00% 45.00% 73.00% 75.00% 62.00% 62.00% 60.00% 61.00% 71.00% 58.00% 63.00% 63.00% 69.00% 73.00% 80.00% 56.00% 84.00% 87.00% 61.00% 92.00% 80.00% 87.00% 90.00% 57.51%
67.00% 55.00% 54.00% 48.00% 76.00% 68.00% 27.00% 22.00% 21.00% 30.00% 29.00% 51.00% 53.00% 49.00% 45.00% 44.00% 56.00% 49.00% 45.00% 52.00% 46.00% 46.00% 49.00% 52.00% ------ 45.00% 52.00% 49.00% 47.00% 70.00% 82.00% 64.00% 70.00% 70.00% 61.00% 64.00% 73.00% 66.00% 56.00% 62.00% 67.00% 71.00% 60.00% 87.00% 86.00% 60.00% 88.00% 86.00% 87.00% 86.00% 58.02%
67.00% 45.00% 49.00% 42.00% 71.00% 60.00% 20.00% 31.00% 18.00% 30.00% 29.00% 42.00% 49.00% 47.00% 48.00% 52.00% 49.00% 52.00% 57.00% 39.00% 46.00% 43.00% 53.00% 51.00% 52.00% ------ 50.00% 52.00% 48.00% 73.00% 65.00% 62.00% 69.00% 57.00% 67.00% 65.00% 65.00% 60.00% 66.00% 69.00% 65.00% 72.00% 64.00% 88.00% 88.00% 61.00% 87.00% 84.00% 86.00% 94.00% 57.12%
71.00% 56.00% 52.00% 49.00% 79.00% 59.00% 21.00% 21.00% 21.00% 25.00% 24.00% 39.00% 48.00% 47.00% 48.00% 44.00% 44.00% 49.00% 44.00% 56.00% 44.00% 47.00% 55.00% 53.00% 56.00% 46.00% ------ 51.00% 51.00% 82.00% 72.00% 64.00% 65.00% 61.00% 68.00% 60.00% 59.00% 60.00% 63.00% 63.00% 72.00% 78.00% 77.00% 86.00% 89.00% 58.00% 85.00% 90.00% 89.00% 92.00% 57.82%
61.00% 55.00% 46.00% 36.00% 62.00% 58.00% 18.00% 18.00% 24.00% 14.00% 25.00% 45.00% 45.00% 53.00% 49.00% 38.00% 41.00% 41.00% 42.00% 51.00% 47.00% 43.00% 39.00% 45.00% 46.00% 53.00% 40.00% ------ 37.00% 65.00% 73.00% 64.00% 57.00% 62.00% 61.00% 58.00% 59.00% 56.00% 63.00% 65.00% 58.00% 73.00% 52.00% 81.00% 84.00% 64.00% 85.00% 87.00% 91.00% 90.00% 53.47%
64.00% 57.00% 46.00% 43.00% 66.00% 63.00% 32.00% 19.00% 15.00% 26.00% 25.00% 49.00% 39.00% 52.00% 39.00% 57.00% 45.00% 39.00% 47.00% 52.00% 50.00% 55.00% 54.00% 44.00% 32.00% 45.00% 50.00% 49.00% ------ 63.00% 73.00% 61.00% 59.00% 56.00% 58.00% 59.00% 60.00% 60.00% 63.00% 60.00% 70.00% 69.00% 56.00% 88.00% 84.00% 63.00% 88.00% 89.00% 86.00% 81.00% 55.10%
56.00% 47.00% 34.00% 28.00% 70.00% 39.00%  8.00% 10.00% 11.00% 14.00% 19.00% 28.00% 20.00% 26.00% 28.00% 24.00% 26.00% 32.00% 33.00% 29.00% 36.00% 35.00% 34.00% 30.00% 27.00% 30.00% 23.00% 25.00% 39.00% ------ 54.00% 38.00% 46.00% 43.00% 40.00% 38.00% 45.00% 46.00% 51.00% 50.00% 46.00% 51.00% 41.00% 69.00% 74.00% 47.00% 69.00% 75.00% 70.00% 82.00% 39.51%
61.00% 43.00% 24.00% 34.00% 67.00% 48.00% 15.00%  9.00% 14.00% 26.00% 18.00% 30.00% 16.00% 24.00% 34.00% 21.00% 24.00% 33.00% 33.00% 27.00% 29.00% 27.00% 27.00% 24.00% 28.00% 24.00% 28.00% 31.00% 35.00% 46.00% ------ 37.00% 38.00% 43.00% 51.00% 45.00% 48.00% 44.00% 48.00% 41.00% 48.00% 53.00% 44.00% 76.00% 70.00% 41.00% 69.00% 69.00% 69.00% 81.00% 39.08%
58.00% 55.00% 35.00% 37.00% 58.00% 55.00% 19.00% 12.00% 24.00% 14.00% 16.00% 43.00% 42.00% 37.00% 31.00% 35.00% 33.00% 37.00% 34.00% 40.00% 36.00% 35.00% 37.00% 35.00% 45.00% 45.00% 35.00% 52.00% 49.00% 60.00% 58.00% ------ 53.00% 49.00% 50.00% 47.00% 59.00% 52.00% 53.00% 57.00% 45.00% 69.00% 61.00% 87.00% 84.00% 45.00% 84.00% 83.00% 80.00% 87.00% 47.90%
53.00% 48.00% 36.00% 36.00% 74.00% 46.00% 14.00% 11.00% 16.00% 18.00% 19.00% 38.00% 33.00% 31.00% 46.00% 35.00% 32.00% 36.00% 32.00% 44.00% 37.00% 30.00% 44.00% 45.00% 33.00% 34.00% 37.00% 47.00% 38.00% 58.00% 61.00% 44.00% ------ 48.00% 51.00% 55.00% 47.00% 57.00% 49.00% 51.00% 52.00% 71.00% 55.00% 84.00% 77.00% 52.00% 81.00% 80.00% 84.00% 78.00% 46.49%
54.00% 48.00% 39.00% 37.00% 61.00% 61.00% 18.00% 13.00% 16.00% 19.00% 13.00% 35.00% 29.00% 38.00% 33.00% 38.00% 42.00% 36.00% 41.00% 32.00% 35.00% 47.00% 31.00% 46.00% 31.00% 47.00% 38.00% 37.00% 37.00% 60.00% 63.00% 47.00% 52.00% ------ 48.00% 47.00% 58.00% 49.00% 49.00% 54.00% 56.00% 67.00% 56.00% 88.00% 85.00% 55.00% 85.00% 79.00% 81.00% 81.00% 47.18%
65.00% 47.00% 35.00% 32.00% 70.00% 61.00% 10.00%  7.00% 17.00% 16.00% 19.00% 34.00% 40.00% 32.00% 39.00% 41.00% 37.00% 32.00% 33.00% 40.00% 40.00% 39.00% 36.00% 37.00% 33.00% 43.00% 35.00% 42.00% 49.00% 61.00% 51.00% 43.00% 52.00% 40.00% ------ 63.00% 50.00% 48.00% 46.00% 49.00% 46.00% 60.00% 54.00% 83.00% 88.00% 46.00% 85.00% 87.00% 85.00% 86.00% 46.61%
66.00% 57.00% 41.00% 40.00% 65.00% 57.00% 12.00% 16.00% 18.00% 16.00% 23.00% 37.00% 33.00% 28.00% 31.00% 37.00% 42.00% 36.00% 40.00% 44.00% 29.00% 37.00% 46.00% 38.00% 40.00% 44.00% 41.00% 38.00% 47.00% 59.00% 66.00% 48.00% 45.00% 56.00% 54.00% ------ 44.00% 59.00% 51.00% 54.00% 38.00% 61.00% 53.00% 77.00% 87.00% 58.00% 87.00% 90.00% 84.00% 84.00% 48.04%
69.00% 48.00% 47.00% 41.00% 69.00% 52.00% 12.00% 13.00% 12.00% 14.00% 20.00% 39.00% 35.00% 35.00% 33.00% 36.00% 33.00% 47.00% 43.00% 34.00% 39.00% 38.00% 37.00% 40.00% 38.00% 36.00% 39.00% 51.00% 40.00% 52.00% 55.00% 49.00% 47.00% 53.00% 50.00% 54.00% ------ 57.00% 51.00% 53.00% 62.00% 60.00% 44.00% 87.00% 82.00% 45.00% 74.00% 87.00% 86.00% 73.00% 47.16%
65.00% 54.00% 42.00% 41.00% 58.00% 54.00% 14.00% 11.00% 16.00% 12.00% 19.00% 35.00% 28.00% 42.00% 37.00% 30.00% 35.00% 31.00% 36.00% 35.00% 33.00% 37.00% 34.00% 38.00% 38.00% 33.00% 33.00% 46.00% 37.00% 63.00% 56.00% 53.00% 51.00% 54.00% 49.00% 40.00% 55.00% ------ 51.00% 43.00% 42.00% 63.00% 49.00% 76.00% 87.00% 51.00% 88.00% 84.00% 81.00% 76.00% 45.63%
60.00% 52.00% 40.00% 33.00% 64.00% 45.00% 14.00% 15.00% 14.00% 11.00% 13.00% 28.00% 37.00% 40.00% 34.00% 31.00% 37.00% 37.00% 34.00% 39.00% 31.00% 33.00% 29.00% 35.00% 38.00% 35.00% 39.00% 45.00% 41.00% 62.00% 55.00% 48.00% 58.00% 52.00% 42.00% 45.00% 52.00% 43.00% ------ 48.00% 47.00% 64.00% 47.00% 80.00% 91.00% 49.00% 87.00% 79.00% 87.00% 85.00% 45.41%
69.00% 53.00% 34.00% 44.00% 65.00% 55.00% 12.00% 15.00% 15.00% 23.00% 22.00% 28.00% 36.00% 35.00% 32.00% 35.00% 33.00% 39.00% 37.00% 44.00% 39.00% 36.00% 36.00% 41.00% 38.00% 36.00% 35.00% 47.00% 39.00% 52.00% 61.00% 54.00% 56.00% 54.00% 57.00% 36.00% 59.00% 59.00% 52.00% ------ 49.00% 60.00% 36.00% 78.00% 80.00% 50.00% 81.00% 78.00% 86.00% 80.00% 46.76%
61.00% 59.00% 37.00% 36.00% 66.00% 59.00% 14.00% 16.00% 12.00% 17.00% 11.00% 39.00% 38.00% 36.00% 35.00% 36.00% 38.00% 41.00% 42.00% 36.00% 27.00% 49.00% 34.00% 31.00% 35.00% 36.00% 40.00% 39.00% 46.00% 55.00% 61.00% 52.00% 48.00% 49.00% 44.00% 58.00% 45.00% 54.00% 55.00% 52.00% ------ 63.00% 50.00% 76.00% 82.00% 51.00% 80.00% 87.00% 83.00% 79.00% 46.73%
58.00% 46.00% 36.00% 31.00% 63.00% 55.00% 14.00% 10.00% 18.00% 23.00% 16.00% 27.00% 19.00% 27.00% 23.00% 29.00% 34.00% 31.00% 28.00% 23.00% 23.00% 27.00% 27.00% 27.00% 32.00% 20.00% 28.00% 29.00% 24.00% 56.00% 56.00% 34.00% 35.00% 41.00% 38.00% 33.00% 34.00% 42.00% 38.00% 35.00% 29.00% ------ 42.00% 83.00% 86.00% 38.00% 84.00% 85.00% 81.00% 77.00% 38.67%
65.00% 48.00% 42.00% 35.00% 66.00% 51.00% 15.00% 15.00% 18.00% 16.00% 17.00% 37.00% 38.00% 24.00% 35.00% 32.00% 40.00% 27.00% 39.00% 40.00% 37.00% 39.00% 29.00% 34.00% 38.00% 32.00% 41.00% 43.00% 38.00% 52.00% 59.00% 50.00% 49.00% 49.00% 48.00% 51.00% 59.00% 45.00% 38.00% 51.00% 53.00% 64.00% ------ 87.00% 83.00% 52.00% 86.00% 82.00% 84.00% 80.00% 45.98%
48.00% 40.00% 13.00% 17.00% 55.00% 42.00% 10.00%  7.00% 11.00%  6.00% 11.00% 10.00% 18.00% 10.00% 12.00% 11.00% 18.00% 22.00% 17.00% 14.00% 13.00% 15.00% 14.00% 13.00% 18.00% 16.00% 13.00% 17.00% 16.00% 29.00% 25.00% 23.00% 16.00% 23.00% 15.00% 19.00% 15.00% 16.00% 17.00% 19.00% 18.00% 24.00% 19.00% ------ 50.00% 16.00% 52.00% 58.00% 50.00% 49.00% 22.04%
48.00% 36.00% 15.00% 17.00% 44.00% 40.00% 10.00%  7.00%  8.00% 12.00% 11.00% 12.00% 19.00% 11.00% 11.00% 18.00% 14.00%  8.00% 12.00% 18.00%  6.00% 10.00% 12.00% 15.00% 15.00% 21.00% 11.00% 16.00% 18.00% 27.00% 33.00% 17.00% 14.00% 17.00% 21.00% 18.00% 11.00% 15.00% 15.00% 19.00% 21.00% 23.00% 16.00% 54.00% ------ 20.00% 53.00% 42.00% 45.00% 46.00% 20.86%
69.00% 55.00% 38.00% 36.00% 74.00% 55.00% 12.00% 12.00% 17.00% 18.00% 16.00% 36.00% 49.00% 26.00% 47.00% 32.00% 38.00% 38.00% 44.00% 42.00% 39.00% 41.00% 43.00% 40.00% 34.00% 32.00% 33.00% 43.00% 46.00% 55.00% 63.00% 54.00% 47.00% 48.00% 52.00% 58.00% 54.00% 54.00% 52.00% 52.00% 47.00% 67.00% 52.00% 88.00% 87.00% ------ 84.00% 84.00% 83.00% 87.00% 48.43%
46.00% 48.00% 13.00% 13.00% 48.00% 37.00%  8.00% 11.00%  8.00% 10.00% 12.00% 13.00% 12.00% 12.00% 13.00% 11.00% 14.00%  9.00% 13.00% 16.00% 15.00% 15.00% 12.00% 15.00% 17.00% 11.00% 13.00% 17.00% 17.00% 28.00% 28.00% 17.00% 15.00% 17.00% 23.00% 21.00% 12.00% 17.00% 12.00% 15.00% 25.00% 14.00% 18.00% 51.00% 53.00% 23.00% ------ 52.00% 47.00% 46.00% 21.08%
53.00% 38.00% 16.00% 13.00% 52.00% 46.00% 11.00%  9.00%  9.00%  8.00%  7.00% 19.00% 16.00% 13.00% 14.00%  5.00% 16.00% 19.00% 15.00% 13.00% 16.00% 17.00% 13.00%  8.00%  7.00% 11.00% 13.00% 15.00% 23.00% 25.00% 26.00% 18.00% 13.00% 19.00% 12.00% 16.00% 18.00% 12.00% 15.00% 18.00% 12.00% 20.00% 22.00% 45.00% 63.00% 18.00% 42.00% ------ 54.00% 51.00% 21.10%
45.00% 39.00% 20.00% 24.00% 61.00% 45.00%  9.00%  7.00%  6.00% 10.00% 15.00% 17.00% 14.00% 15.00% 14.00% 10.00% 21.00% 16.00% 18.00% 15.00% 20.00%  9.00% 18.00% 12.00% 10.00% 14.00% 17.00% 21.00% 21.00% 24.00% 28.00% 17.00% 17.00% 13.00% 20.00% 23.00% 16.00% 21.00% 21.00% 19.00% 15.00% 27.00% 13.00% 52.00% 42.00% 21.00% 54.00% 49.00% ------ 58.00% 22.71%
48.00% 40.00% 12.00% 20.00% 58.00% 51.00% 10.00% 12.00% 14.00% 17.00%  7.00% 17.00%  7.00% 13.00% 14.00% 11.00% 11.00% 17.00% 12.00% 15.00%  9.00% 14.00% 10.00% 20.00% 18.00%  8.00% 11.00% 24.00% 14.00% 30.00% 30.00% 23.00% 20.00% 21.00% 11.00% 22.00% 21.00% 19.00% 18.00% 20.00% 14.00% 33.00% 21.00% 50.00% 43.00% 21.00% 51.00% 49.00% 58.00% ------ 22.63%
